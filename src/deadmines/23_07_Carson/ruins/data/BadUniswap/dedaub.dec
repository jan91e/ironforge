// Decompiled by library.dedaub.com
// 2023.07.25 16:29 UTC
// Compiled using the solidity compiler version 0.5.16


// Data structures and variables inferred from the use of storage instructions
uint256 _totalSupply; // STORAGE[0x0]
mapping (uint256 => uint256) _balanceOf; // STORAGE[0x1]
mapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x2]
uint256 _dOMAIN_SEPARATOR; // STORAGE[0x3]
mapping (uint256 => uint256) _nonces; // STORAGE[0x4]
uint256 _price0CumulativeLast; // STORAGE[0x9]
uint256 _price1CumulativeLast; // STORAGE[0xa]
uint256 _kLast; // STORAGE[0xb]
uint256 _mint; // STORAGE[0xc]
uint256 stor_8_0_0; // STORAGE[0x8] bytes 0 to 0
uint256 _factory; // STORAGE[0x5] bytes 0 to 19
uint256 _token0; // STORAGE[0x6] bytes 0 to 19
uint256 _token1; // STORAGE[0x7] bytes 0 to 19
uint256 _getReserves; // STORAGE[0x8] bytes 0 to 13
uint256 stor_8_14_14; // STORAGE[0x8] bytes 14 to 14
uint256 stor_8_14_27; // STORAGE[0x8] bytes 14 to 27
uint256 stor_8_28_31; // STORAGE[0x8] bytes 28 to 31


// Events
Swap(address, uint256, uint256, uint256, uint256, address);
Mint(address, uint256, uint256);
Burn(address, uint256, uint256, address);
Approval(address, address, uint256);
Transfer(address, address, uint256);
Sync(uint112, uint112);

function 0x19cd(uint256 varg0, address varg1, address varg2) private { 
    MEM[64] = MEM[64] + 100;
    v0 = v1 = MEM[64] + 32;
    v2 = v3 = MEM[64];
    while (v4 >= 32) {
        MEM[v2] = MEM[v0];
        v4 = v4 + ~31;
        v2 += 32;
        v0 += 32;
    }
    MEM[v2] = MEM[v0] & ~(256 ** (32 - v4) - 1) | MEM[v2] & 256 ** (32 - v4) - 1;
    v5, v6, v7 = varg2.transfer(varg1, varg0).gas(msg.gas);
    if (RETURNDATASIZE() == 0) {
        v8 = v9 = 96;
    } else {
        v8 = new bytes[](RETURNDATASIZE());
        RETURNDATACOPY(v8.data, 0, RETURNDATASIZE());
    }
    if (v5) {
        v5 = v10 = !MEM[v8];
        if (MEM[v8]) {
            require(MEM[v8] >= 32);
            v5 = v11 = MEM[32 + v8];
        }
    }
    require(v5, Error('UniswapV2: TRANSFER_FAILED'));
    return ;
}

function swap(uint256 varg0, uint256 varg1, address varg2, bytes varg3) public payable { 
    v0 = v1 = 10614;
    require(msg.data.length - 4 >= 128);
    v0 = v2 = varg2;
    require(varg3 <= 0x100000000);
    require(varg3.data <= 4 + (msg.data.length - 4));
    v0 = v3 = varg3.length;
    v0 = v4 = varg3.data;
    require(!((v3 > 0x100000000) | (v4 + v3 > 4 + (msg.data.length - 4))));
    require(1 == _mint, Error('UniswapV2: LOCKED'));
    _mint = 0;
    require(bool(_factory.code.size));
    v5, /* address */ v6 = _factory.staticcall(0x64a115b400000000000000000000000000000000000000000000000000000000, this).gas(msg.gas);
    require(bool(v5), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    v7 = v8 = !address(v6);
    if (address(v6)) {
        v7 = msg.sender == address(v6);
    }
    require(v7, Error('UniswapV2: FORBIDDEN'));
    v9 = v10 = varg0 > 0;
    if (varg0 <= 0) {
        v9 = v11 = varg1 > 0;
    }
    require(v9, Error('UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'));
    v0 = v12 = _getReserves;
    v0 = v13 = stor_8_14_27;
    v14 = v15 = varg0 < _getReserves;
    if (v15) {
        v14 = v16 = varg1 < stor_8_14_27;
    }
    require(v14, Error('UniswapV2: INSUFFICIENT_LIQUIDITY'));
    v17 = v18 = _token0 != address(v2);
    if (_token0 != address(v2)) {
        v17 = v19 = address(v2) != _token1;
    }
    require(v17, Error('UniswapV2: INVALID_TO'));
    if (varg0) {
        0x19cd(varg0, v2, _token0);
    }
    if (varg1) {
        0x19cd(varg1, v2, _token1);
    }
    if (v3) {
        v20 = new bytes[](v3);
        v20[v3] = 0;
        require(bool((address(v2)).code.size));
        v21 = address(v2).uniswapV2Call(msg.sender, varg0, varg1, v20).gas(msg.gas);
        require(bool(v21), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    }
    require(bool(_token0.code.size));
    v22, v0 = _token0.balanceOf(this).gas(msg.gas);
    require(bool(v22), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    require(bool(_token1.code.size));
    v23, v0 = _token1.balanceOf(this).gas(msg.gas);
    require(bool(v23), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    if (v0 > _getReserves - varg0) {
        v0 = v24 = v0 - (_getReserves - varg0);
    } else {
        v0 = v25 = 0;
    }
    if (v0 > stor_8_14_27 - varg1) {
        v0 = v26 = v0 - (stor_8_14_27 - varg1);
    } else {
        v0 = v27 = 0;
    }
    v28 = v29 = v0 > 0;
    if (v0 <= 0) {
        v28 = v30 = v0 > 0;
    }
    require(v28, Error('UniswapV2: INSUFFICIENT_INPUT_AMOUNT', v31, v31, 128));
    v32 = v33 = 2552;
    v34 = v35 = 0x1b67(3, v0);
    while (1) {
        v36 = 0x1b67(1000, v0);
        v0 = _SafeSub(v34, v36);
        v32 = v37 = 2576;
        v34 = 0x1b67(3, v0);
    }
    v38 = 0x1b67(uint112(v0), uint112(v0));
    v39 = 0x1b67(0xf4240, v38);
    v40 = 0x1b67(v0, v0);
    require(v40 >= v39, Error('UniswapV2: K'));
    require(bool(_factory.code.size));
    v41, /* address */ v42, v43, /* address */ v44, v45 = _factory.staticcall(0x918b6c8d, this, _token0).gas(msg.gas);
    require(bool(v41), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 128);
    v46 = 0x1b67(v43, v0);
    assert(0xde0b6b3a7640000);
    v47 = 0x1b67(v45, v0);
    assert(0xde0b6b3a7640000);
    if (v46 / 0xde0b6b3a7640000) {
        require(bool(_token0.code.size));
        v48 = _token0.transfer(address(v42), v46 / 0xde0b6b3a7640000).gas(msg.gas);
        require(bool(v48), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
        require(RETURNDATASIZE() >= 32);
        require(bool(_token0.code.size));
        v49 = _token0.transfer(address(v44), v47 / 0xde0b6b3a7640000).gas(msg.gas);
        require(bool(v49), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
        require(RETURNDATASIZE() >= 32);
    }
    require(bool(_factory.code.size));
    v50, /* address */ v51, v52, /* address */ v53, v54 = _factory.staticcall(0x918b6c8d, this, _token1).gas(msg.gas);
    require(bool(v50), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 128);
    v55 = 0x1b67(v52, v0);
    assert(0xde0b6b3a7640000);
    v56 = 0x1b67(v54, v0);
    assert(0xde0b6b3a7640000);
    if (v55 / 0xde0b6b3a7640000) {
        require(bool(_token1.code.size));
        v57 = _token1.transfer(address(v51), v55 / 0xde0b6b3a7640000).gas(msg.gas);
        require(bool(v57), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
        require(RETURNDATASIZE() >= 32);
        require(bool(_token1.code.size));
        v58 = _token1.transfer(address(v53), v56 / 0xde0b6b3a7640000).gas(msg.gas);
        require(bool(v58), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
        require(RETURNDATASIZE() >= 32);
    }
    require(bool(_token0.code.size));
    v59, v60 = _token0.balanceOf(this).gas(msg.gas);
    require(bool(v59), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    require(bool(_token1.code.size));
    v61, v62 = _token1.balanceOf(this).gas(msg.gas);
    require(bool(v61), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    0x248a(v0, v0, v62, v60);
    emit Swap(msg.sender, address(v0), v0, v0, v0, v0);
    _mint = 1;
}

function 0x1b67(uint256 varg0, uint256 varg1) private { 
    v0 = v1 = 0;
    v2 = v3 = !varg0;
    if (varg0) {
        v0 = v4 = varg1 * varg0;
        assert(varg0);
        v2 = v5 = v4 / varg0 == varg1;
    }
    require(v2, Error('ds-math-mul-overflow'));
    return v0;
}

function _SafeSub(uint256 varg0, uint256 varg1) private { 
    require(varg1 - varg0 <= varg1, Error('ds-math-sub-underflow'));
    return varg1 - varg0;
}

function 0x2172(uint256 varg0, address varg1, address varg2) private { 
    v0 = _SafeSub(varg0, _balanceOf[varg2]);
    _balanceOf[varg2] = v0;
    require(_balanceOf[varg1] + varg0 >= _balanceOf[varg1], Error('ds-math-add-overflow'));
    _balanceOf[varg1] = _balanceOf[varg1] + varg0;
    emit Transfer(varg2, varg1, varg0);
    return ;
}

function 0x222c(uint112 varg0, uint112 varg1) private { 
    require(bool(_factory.code.size));
    v0, v1 = _factory.feeTo().gas(msg.gas);
    require(bool(v0), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    if (!address(v1)) {
        if (!_kLast) {
            return bool(address(v1));
        } else {
            _kLast = 0;
            return bool(address(v1));
        }
    } else {
        if (_kLast) {
            v2 = 0x1b67(varg0, varg1);
            v3 = 0x238a(v2);
            v4 = 0x238a(_kLast);
            if (v3 > v4) {
                v5 = _SafeSub(v4, v3);
                v6 = 0x1b67(v5, _totalSupply);
                v7 = 0x1b67(5, v3);
                require(v7 + v4 >= v7, Error('ds-math-add-overflow'));
                assert(v7 + v4);
                if (v6 / (v7 + v4)) {
                    0x23dc(v6 / (v7 + v4), v1);
                }
            }
        }
        return bool(address(v1));
    }
}

function 0x238a(uint256 varg0) private { 
    if (varg0 <= 3) {
        if (!varg0) {
            return 0;
        } else {
            return 1;
        }
    } else {
        varg0 = v0 = (varg0 >> 1) + 1;
        while (varg0 < varg0) {
            assert(varg0);
            assert(2);
            varg0 = varg0 / varg0 + varg0 >> 1;
        }
        return varg0;
    }
}

function name() public payable { 
    v0 = new array[](v1.length);
    v2 = 0;
    while (v2 < v1.length) {
        MEM[v2 + v0.data] = MEM[v2 + v1.data];
        v2 += 32;
    }
    if (10) {
        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffff & 'Uniswap V2';
    }
    return v0;
}

function 0x23dc(uint256 varg0, address varg1) private { 
    require(_totalSupply + varg0 >= _totalSupply, Error('ds-math-add-overflow'));
    _totalSupply = _totalSupply + varg0;
    require(_balanceOf[varg1] + varg0 >= _balanceOf[varg1], Error('ds-math-add-overflow'));
    _balanceOf[varg1] = _balanceOf[varg1] + varg0;
    emit Transfer(0, varg1, varg0);
    return ;
}

function 0x248a(uint112 varg0, uint112 varg1, uint256 varg2, uint256 varg3) private { 
    v0 = v1 = varg3 <= 0xffffffffffffffffffffffffffff;
    if (varg3 <= 0xffffffffffffffffffffffffffff) {
        v0 = varg2 <= 0xffffffffffffffffffffffffffff;
    }
    require(v0, Error('UniswapV2: OVERFLOW'));
    v2 = bool(uint32(uint32(block.timestamp) - stor_8_28_31));
    if (uint32(uint32(block.timestamp) - stor_8_28_31)) {
        v2 = v3 = bool(uint112(varg1));
    }
    if (v2) {
        v2 = v4 = bool(uint112(varg0));
    }
    if (v2) {
        assert(varg1);
        _price0CumulativeLast += uint224(uint224(uint224(uint112(varg0) << 112)) / uint112(varg1)) * uint32(uint32(block.timestamp) - stor_8_28_31);
        assert(varg0);
        _price1CumulativeLast += uint224(uint224(uint224(uint112(varg1) << 112)) / uint112(varg0)) * uint32(uint32(block.timestamp) - stor_8_28_31);
    }
    _getReserves = varg3;
    stor_8_28_31 = uint32(block.timestamp);
    stor_8_14_27 = varg2;
    v5 = uint112((uint32(uint32(block.timestamp)) << 224 | uint224(uint112(varg2) << 112 | ~0xffffffffffffffffffffffffffff0000000000000000000000000000 & (uint112(varg3) | bytes18(STORAGE[8])))) >> 112);
    emit Sync(_getReserves, v5);
    return ;
}

function () public payable { 
    revert();
}

function getReserves() public payable { 
    return _getReserves, stor_8_14_27, stor_8_28_31;
}

function approve(address varg0, uint256 varg1) public payable { 
    require(msg.data.length - 4 >= 64);
    _allowance[msg.sender][varg0] = varg1;
    emit Approval(msg.sender, varg0, varg1);
    return bool(1);
}

function token0() public payable { 
    return _token0;
}

function totalSupply() public payable { 
    return _totalSupply;
}

function transferFrom(address varg0, address varg1, uint256 varg2) public payable { 
    require(msg.data.length - 4 >= 96);
    if (~0 != _allowance[varg0][msg.sender]) {
        v0 = _SafeSub(varg2, _allowance[varg0][msg.sender]);
        _allowance[varg0][msg.sender] = v0;
    }
    0x2172(varg2, varg1, varg0);
    return bool(1);
}

function PERMIT_TYPEHASH() public payable { 
    return 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
}

function decimals() public payable { 
    return uint8(18);
}

function DOMAIN_SEPARATOR() public payable { 
    return _dOMAIN_SEPARATOR;
}

function initialize(address varg0, address varg1) public payable { 
    require(msg.data.length - 4 >= 64);
    require(msg.sender == _factory, Error('UniswapV2: FORBIDDEN'));
    _token0 = varg0;
    _token1 = varg1;
}

function price0CumulativeLast() public payable { 
    return _price0CumulativeLast;
}

function price1CumulativeLast() public payable { 
    return _price1CumulativeLast;
}

function mint(address varg0) public payable { 
    require(msg.data.length - 4 >= 32);
    require(1 == _mint, Error('UniswapV2: LOCKED'));
    _mint = 0;
    require(bool(_token0.code.size));
    v0, v1 = _token0.balanceOf(this).gas(msg.gas);
    require(bool(v0), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    require(bool(_token1.code.size));
    v2, v3 = _token1.balanceOf(this).gas(msg.gas);
    require(bool(v2), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    v4 = _SafeSub(_getReserves, v1);
    v5 = _SafeSub(stor_8_14_27, v3);
    v6 = 0x222c(stor_8_14_27, _getReserves);
    if (_totalSupply) {
        v7 = 0x1b67(_totalSupply, v4);
        assert(_getReserves);
        v8 = v9 = v7 / _getReserves;
        v10 = 0x1b67(_totalSupply, v5);
        assert(stor_8_14_27);
        v8 = v11 = v10 / stor_8_14_27;
        if (v9 >= v11) {
        }
    } else {
        v12 = 0x1b67(v5, v4);
        v13 = 0x238a(v12);
        v8 = v14 = _SafeSub(1000, v13);
        0x23dc(1000, 0);
    }
    require(v8 > 0, Error('UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED'));
    0x23dc(v8, varg0);
    0x248a(stor_8_14_27, _getReserves, v3, v1);
    if (v6) {
        v15 = 0x1b67(stor_8_14_27, _getReserves);
        _kLast = v15;
    }
    emit Mint(msg.sender, v4, v5);
    _mint = 1;
    return v8;
}

function balanceOf(address varg0) public payable { 
    require(msg.data.length - 4 >= 32);
    return _balanceOf[varg0];
}

function kLast() public payable { 
    return _kLast;
}

function nonces(address varg0) public payable { 
    require(msg.data.length - 4 >= 32);
    return _nonces[varg0];
}

function burn(address varg0) public payable { 
    require(msg.data.length - 4 >= 32);
    require(1 == _mint, Error('UniswapV2: LOCKED'));
    _mint = 0;
    require(bool(_token0.code.size));
    v0, v1 = _token0.balanceOf(this).gas(msg.gas);
    require(bool(v0), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    require(bool(_token1.code.size));
    v2, v3 = _token1.balanceOf(this).gas(msg.gas);
    require(bool(v2), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    v4 = 0x222c(stor_8_14_27, _getReserves);
    v5 = 0x1b67(v1, _balanceOf[this]);
    assert(_totalSupply);
    v6 = 0x1b67(v3, _balanceOf[this]);
    assert(_totalSupply);
    v7 = v8 = v5 / _totalSupply > 0;
    if (v8) {
        v7 = v9 = v6 / _totalSupply > 0;
    }
    require(v7, Error('UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED'));
    v10 = _SafeSub(_balanceOf[this], _balanceOf[address(this)]);
    _balanceOf[address(this)] = v10;
    v11 = _SafeSub(_balanceOf[this], _totalSupply);
    _totalSupply = v11;
    emit Transfer(address(this), 0, _balanceOf[this]);
    0x19cd(v5 / _totalSupply, varg0, _token0);
    0x19cd(v6 / _totalSupply, varg0, _token1);
    require(bool(_token0.code.size));
    v12, v13 = _token0.balanceOf(this).gas(msg.gas);
    require(bool(v12), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    require(bool(_token1.code.size));
    v14, v15 = _token1.balanceOf(this).gas(msg.gas);
    require(bool(v14), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    0x248a(stor_8_14_27, _getReserves, v15, v13);
    if (v4) {
        v16 = 0x1b67(stor_8_14_27, _getReserves);
        _kLast = v16;
    }
    emit Burn(msg.sender, varg0, v5 / _totalSupply, v6 / _totalSupply);
    _mint = 1;
    return v5 / _totalSupply, v6 / _totalSupply;
}

function symbol() public payable { 
    v0 = new array[](v1.length);
    v2 = 0;
    while (v2 < v1.length) {
        MEM[v2 + v0.data] = MEM[v2 + v1.data];
        v2 += 32;
    }
    if (6) {
        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'UNI-V2';
    }
    return v0;
}

function transfer(address varg0, uint256 varg1) public payable { 
    require(msg.data.length - 4 >= 64);
    0x2172(varg1, varg0, msg.sender);
    return bool(1);
}

function MINIMUM_LIQUIDITY() public payable { 
    return 1000;
}

function skim(address varg0) public payable { 
    require(msg.data.length - 4 >= 32);
    require(1 == _mint, Error('UniswapV2: LOCKED'));
    _mint = 0;
    MEM[MEM[64]] = 0x70a0823100000000000000000000000000000000000000000000000000000000;
    MEM[MEM[64] + 4] = this;
    v0 = v1 = MEM[64];
    v2 = v3 = _token0;
    v2 = v4 = _token1;
    v5 = v6 = 5339;
    v7 = v8 = 11770;
    v9 = v10 = _getReserves;
    v11 = v12 = 32;
    v13 = v14 = 36;
    require(bool(v3.code.size));
    while (1) {
        v15 = v2.staticcall(MEM[v0 len v13], MEM[v0 len v11]).gas(msg.gas);
        if (bool(v15)) {
            break;
        }
        v16 = 'transfer(address,uint256)';
        require(RETURNDATASIZE() >= 32);
        require(v16.length - v9 <= v16.length, Error('ds-math-sub-underflow'));
        goto {'0x2dfa', '0x2e1e'};
        MEM[64] = MEM[64] + 100;
        v17 = MEM[64] + 32;
        v18 = MEM[64];
        while (v19 >= 32) {
            MEM[v18] = MEM[v17];
            v19 = v19 + ~31;
            v18 += 32;
            v17 += 32;
        }
        MEM[v18] = MEM[v17] & ~(256 ** (32 - v19) - 1) | MEM[v18] & 256 ** (32 - v19) - 1;
        v20, v21, v22 = address(v2).transfer(varg0, v16.length - v9).gas(msg.gas);
        if (RETURNDATASIZE() == 0) {
            v23 = v24 = 96;
        } else {
            v23 = new bytes[](0x70a0823100000000000000000000000000000000000000000000000000000000);
            RETURNDATACOPY(v23.data, 0, RETURNDATASIZE());
        }
        if (v20) {
            v20 = v25 = !MEM[v23];
            if (MEM[v23]) {
                require(MEM[v23] >= 32);
                v20 = v26 = MEM[32 + v23];
            }
        }
        require(v20, Error('UniswapV2: TRANSFER_FAILED'));
        goto {'0x1542', '0x14db'};
        v27 = new bytes[](0x70a0823100000000000000000000000000000000000000000000000000000000);
        MEM[v27 + 4] = this;
        v0 = v28 = MEM[64];
        v5 = v29 = 5442;
        v7 = v30 = 11806;
        v9 = v31 = stor_8_14_27;
        v2 = v32 = _token1;
        v11 = v33 = 32;
        v13 = v34 = 36;
        require(bool(v32.code.size));
        _mint = 1;
        exit;
        goto 0x19cd0x506;
    }
    revert(0, RETURNDATASIZE());
}

function factory() public payable { 
    return _factory;
}

function token1() public payable { 
    return _token1;
}

function permit(address varg0, address varg1, uint256 varg2, uint256 varg3, uint8 varg4, bytes32 varg5, bytes32 varg6) public payable { 
    require(msg.data.length - 4 >= 224);
    require(varg3 >= block.timestamp, Error('UniswapV2: EXPIRED'));
    _nonces[varg0] = _nonces[varg0] + 1;
    MEM[MEM[64] + 256] = 0x1901000000000000000000000000000000000000000000000000000000000000;
    MEM[MEM[64] + 258] = _dOMAIN_SEPARATOR;
    MEM[MEM[64] + 290] = keccak256(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9, varg0, varg1, varg2, _nonces[varg0], varg3);
    v0 = new array[](290 + (MEM[64] - v0));
    v1 = v0.length;
    v2 = v0.data;
    MEM[MEM[64] + 322] = 0;
    MEM[MEM[64] + 354] = keccak256(v0);
    MEM[MEM[64] + 386] = varg4;
    MEM[MEM[64] + 418] = varg5;
    MEM[MEM[64] + 450] = varg6;
    v3, /* address */ v4 = ecrecover(MEM[(MEM[64]) len (482 + (MEM[64] - MEM[64]))], MEM[(MEM[64] + ~31) len 32]);
    require(bool(v3), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    v5 = v6 = bool(address(v4));
    if (address(v4)) {
        v5 = v7 = address(v4) == varg0;
    }
    require(v5, Error('UniswapV2: INVALID_SIGNATURE'));
    _allowance[varg0][varg1] = varg2;
    emit Approval(varg0, varg1, varg2);
}

function allowance(address varg0, address varg1) public payable { 
    require(msg.data.length - 4 >= 64);
    return _allowance[varg0][varg1];
}

function sync() public payable { 
    require(1 == _mint, Error('UniswapV2: LOCKED'));
    _mint = 0;
    require(bool(_token0.code.size));
    v0, v1 = _token0.balanceOf(this).gas(msg.gas);
    require(bool(v0), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    require(bool(_token1.code.size));
    v2, v3 = _token1.balanceOf(this).gas(msg.gas);
    require(bool(v2), 0, RETURNDATASIZE()); // checks call status, propagates error data on error
    require(RETURNDATASIZE() >= 32);
    v4 = v1 <= 0xffffffffffffffffffffffffffff;
    if (v1 <= 0xffffffffffffffffffffffffffff) {
        v4 = v5 = v3 <= 0xffffffffffffffffffffffffffff;
    }
    require(v4, Error('UniswapV2: OVERFLOW'));
    v6 = bool(uint32(uint32(block.timestamp) - stor_8_28_31));
    if (uint32(uint32(block.timestamp) - stor_8_28_31)) {
        v6 = v7 = stor_8_0_0;
    }
    if (v6) {
        v6 = v8 = stor_8_14_14;
    }
    if (v6) {
        assert(_getReserves);
        _price0CumulativeLast += uint224(stor_8_14_27 / _getReserves) * uint32(uint32(block.timestamp) - stor_8_28_31);
        assert(stor_8_14_27);
        _price1CumulativeLast += uint224(_getReserves / stor_8_14_27) * uint32(uint32(block.timestamp) - stor_8_28_31);
    }
    _getReserves = v1;
    stor_8_28_31 = uint32(block.timestamp);
    stor_8_14_27 = v3;
    emit Sync(_getReserves, uint112((uint32(uint32(block.timestamp)) << 224 | uint224(uint112(v3) << 112 | ~0xffffffffffffffffffffffffffff0000000000000000000000000000 & (uint112(v1) | bytes18(STORAGE[8])))) >> 112));
    _mint = 1;
}

// Note: The function selector is not present in the original solidity code.
// However, we display it for the sake of completeness.

function __function_selector__(bytes4 function_selector) public payable { 
    MEM[64] = 128;
    require(!msg.value);
    if (msg.data.length < 4) {
        ();
    } else {
        v0 = function_selector >> 224;
        if (0x6a627842 > v0) {
            if (0x23b872dd > v0) {
                if (0x22c0d9f == v0) {
                    swap(uint256,uint256,address,bytes);
                } else if (0x6fdde03 == v0) {
                    name();
                } else if (0x902f1ac == v0) {
                    getReserves();
                } else if (0x95ea7b3 == v0) {
                    approve(address,uint256);
                } else if (0xdfe1681 == v0) {
                    token0();
                } else {
                    require(0x18160ddd == v0);
                    totalSupply();
                }
            } else if (0x3644e515 > v0) {
                if (0x23b872dd == v0) {
                    transferFrom(address,address,uint256);
                } else if (0x30adf81f == v0) {
                    PERMIT_TYPEHASH();
                } else {
                    require(0x313ce567 == v0);
                    decimals();
                }
            } else if (0x3644e515 == v0) {
                DOMAIN_SEPARATOR();
            } else if (0x485cc955 == v0) {
                initialize(address,address);
            } else if (0x5909c0d5 == v0) {
                price0CumulativeLast();
            } else {
                require(0x5a3d5493 == v0);
                price1CumulativeLast();
            }
        } else if (0xba9a7a56 > v0) {
            if (0x7ecebe00 > v0) {
                if (0x6a627842 == v0) {
                    mint(address);
                } else if (0x70a08231 == v0) {
                    balanceOf(address);
                } else {
                    require(0x7464fc3d == v0);
                    kLast();
                }
            } else if (0x7ecebe00 == v0) {
                nonces(address);
            } else if (0x89afcb44 == v0) {
                burn(address);
            } else if (0x95d89b41 == v0) {
                symbol();
            } else {
                require(0xa9059cbb == v0);
                transfer(address,uint256);
            }
        } else if (0xd21220a7 > v0) {
            if (0xba9a7a56 == v0) {
                MINIMUM_LIQUIDITY();
            } else if (0xbc25cf77 == v0) {
                skim(address);
            } else {
                require(0xc45a0155 == v0);
                factory();
            }
        } else if (0xd21220a7 == v0) {
            token1();
        } else if (0xd505accf == v0) {
            permit(address,address,uint256,uint256,uint8,bytes32,bytes32);
        } else if (0xdd62ed3e == v0) {
            allowance(address,address);
        } else {
            require(0xfff6cae9 == v0);
            sync();
        }
    }
}
