contract Contract {
    function main() {
        memory[0x40:0x60] = 0x80;
        var var0 = msg.value;
    
        if (var0) { revert(memory[0x00:0x00]); }
    
        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }
    
        var0 = msg.data[0x00:0x20] >> 0xe0;
    
        if (0x6a627842 > var0) {
            if (0x23b872dd > var0) {
                if (var0 == 0x022c0d9f) {
                    // Dispatch table entry for swap(uint256,uint256,address,bytes)
                    var var1 = 0x023a;
                    var var2 = 0x04;
                    var var3 = msg.data.length - var2;
                
                    if (var3 < 0x80) { revert(memory[0x00:0x00]); }
                
                    swap(var2, var3);
                    stop();
                } else if (var0 == 0x06fdde03) {
                    // Dispatch table entry for name()
                    var1 = 0x0244;
                    var2 = name();
                
                label_0244:
                    var temp0 = memory[0x40:0x60];
                    memory[temp0:temp0 + 0x20] = 0x20;
                    var temp1 = var2;
                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];
                    var3 = temp0;
                    var var4 = var3;
                    var var5 = var4 + 0x40;
                    var var7 = memory[temp1:temp1 + 0x20];
                    var var6 = temp1 + 0x20;
                    var var8 = var7;
                    var var9 = var5;
                    var var10 = var6;
                    var var11 = 0x00;
                
                    if (var11 >= var8) {
                    label_027E:
                        var temp2 = var7;
                        var5 = temp2 + var5;
                        var6 = temp2 & 0x1f;
                    
                        if (!var6) {
                            var temp3 = memory[0x40:0x60];
                            return memory[temp3:temp3 + var5 - temp3];
                        } else {
                            var temp4 = var6;
                            var temp5 = var5 - temp4;
                            memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];
                            var temp6 = memory[0x40:0x60];
                            return memory[temp6:temp6 + (temp5 + 0x20) - temp6];
                        }
                    } else {
                    label_026F:
                        var temp7 = var11;
                        memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];
                        var11 = temp7 + 0x20;
                    
                        if (var11 >= var8) { goto label_027E; }
                        else { goto label_026F; }
                    }
                } else if (var0 == 0x0902f1ac) {
                    // Dispatch table entry for getReserves()
                    var1 = 0x02c1;
                    var1, var2, var3 = getReserves();
                    var temp8 = memory[0x40:0x60];
                    var temp9 = (0x01 << 0x70) - 0x01;
                    memory[temp8:temp8 + 0x20] = temp9 & var1;
                    memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp9 & var2;
                    memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = var3 & 0xffffffff;
                    var temp10 = memory[0x40:0x60];
                    return memory[temp10:temp10 + temp8 - temp10 + 0x60];
                } else if (var0 == 0x095ea7b3) {
                    // Dispatch table entry for approve(address,uint256)
                    var1 = 0x031d;
                    var2 = 0x04;
                    var3 = msg.data.length - var2;
                
                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }
                
                    var1 = approve(var2, var3);
                
                label_031D:
                    var temp11 = memory[0x40:0x60];
                    memory[temp11:temp11 + 0x20] = !!var1;
                    var temp12 = memory[0x40:0x60];
                    return memory[temp12:temp12 + temp11 - temp12 + 0x20];
                } else if (var0 == 0x0dfe1681) {
                    // Dispatch table entry for token0()
                    var1 = 0x0339;
                    var2 = token0();
                
                label_0339:
                    var temp13 = memory[0x40:0x60];
                    memory[temp13:temp13 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;
                    var temp14 = memory[0x40:0x60];
                    return memory[temp14:temp14 + temp13 - temp14 + 0x20];
                } else if (var0 == 0x18160ddd) {
                    // Dispatch table entry for totalSupply()
                    var1 = 0x035d;
                    var2 = totalSupply();
                
                label_035D:
                    var temp15 = memory[0x40:0x60];
                    memory[temp15:temp15 + 0x20] = var2;
                    var temp16 = memory[0x40:0x60];
                    return memory[temp16:temp16 + temp15 - temp16 + 0x20];
                } else { revert(memory[0x00:0x00]); }
            } else if (0x3644e515 > var0) {
                if (var0 == 0x23b872dd) {
                    // Dispatch table entry for transferFrom(address,address,uint256)
                    var1 = 0x031d;
                    var2 = 0x04;
                    var3 = msg.data.length - var2;
                
                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }
                
                    var1 = transferFrom(var2, var3);
                    goto label_031D;
                } else if (var0 == 0x30adf81f) {
                    // Dispatch table entry for PERMIT_TYPEHASH()
                    var1 = 0x035d;
                    var2 = PERMIT_TYPEHASH();
                    goto label_035D;
                } else if (var0 == 0x313ce567) {
                    // Dispatch table entry for decimals()
                    var1 = 0x03b5;
                    var2 = decimals();
                    var temp17 = memory[0x40:0x60];
                    memory[temp17:temp17 + 0x20] = var2 & 0xff;
                    var temp18 = memory[0x40:0x60];
                    return memory[temp18:temp18 + temp17 - temp18 + 0x20];
                } else { revert(memory[0x00:0x00]); }
            } else if (var0 == 0x3644e515) {
                // Dispatch table entry for DOMAIN_SEPARATOR()
                var1 = 0x035d;
                var2 = DOMAIN_SEPARATOR();
                goto label_035D;
            } else if (var0 == 0x485cc955) {
                // Dispatch table entry for initialize(address,address)
                var1 = 0x023a;
                var2 = 0x04;
                var3 = msg.data.length - var2;
            
                if (var3 < 0x40) { revert(memory[0x00:0x00]); }
            
                initialize(var2, var3);
                stop();
            } else if (var0 == 0x5909c0d5) {
                // Dispatch table entry for price0CumulativeLast()
                var1 = 0x035d;
                var2 = price0CumulativeLast();
                goto label_035D;
            } else if (var0 == 0x5a3d5493) {
                // Dispatch table entry for price1CumulativeLast()
                var1 = 0x035d;
                var2 = price1CumulativeLast();
                goto label_035D;
            } else { revert(memory[0x00:0x00]); }
        } else if (0xba9a7a56 > var0) {
            if (0x7ecebe00 > var0) {
                if (var0 == 0x6a627842) {
                    // Dispatch table entry for mint(address)
                    var1 = 0x035d;
                    var2 = 0x04;
                    var3 = msg.data.length - var2;
                
                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }
                
                    var1 = mint(var2, var3);
                    goto label_035D;
                } else if (var0 == 0x70a08231) {
                    // Dispatch table entry for balanceOf(address)
                    var1 = 0x035d;
                    var2 = 0x04;
                    var3 = msg.data.length - var2;
                
                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }
                
                    var2 = balanceOf(var2, var3);
                    goto label_035D;
                } else if (var0 == 0x7464fc3d) {
                    // Dispatch table entry for kLast()
                    var1 = 0x035d;
                    var2 = kLast();
                    goto label_035D;
                } else { revert(memory[0x00:0x00]); }
            } else if (var0 == 0x7ecebe00) {
                // Dispatch table entry for nonces(address)
                var1 = 0x035d;
                var2 = 0x04;
                var3 = msg.data.length - var2;
            
                if (var3 < 0x20) { revert(memory[0x00:0x00]); }
            
                var2 = nonces(var2, var3);
                goto label_035D;
            } else if (var0 == 0x89afcb44) {
                // Dispatch table entry for burn(address)
                var1 = 0x04b1;
                var2 = 0x04;
                var3 = msg.data.length - var2;
            
                if (var3 < 0x20) { revert(memory[0x00:0x00]); }
            
                var1, var2 = burn(var2, var3);
                var temp19 = memory[0x40:0x60];
                memory[temp19:temp19 + 0x20] = var1;
                memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = var2;
                var temp20 = memory[0x40:0x60];
                return memory[temp20:temp20 + temp19 - temp20 + 0x40];
            } else if (var0 == 0x95d89b41) {
                // Dispatch table entry for symbol()
                var1 = 0x0244;
                var2 = symbol();
                goto label_0244;
            } else if (var0 == 0xa9059cbb) {
                // Dispatch table entry for transfer(address,uint256)
                var1 = 0x031d;
                var2 = 0x04;
                var3 = msg.data.length - var2;
            
                if (var3 < 0x40) { revert(memory[0x00:0x00]); }
            
                var temp21 = var2;
                var2 = msg.data[temp21:temp21 + 0x20] & (0x01 << 0xa0) - 0x01;
                var3 = msg.data[temp21 + 0x20:temp21 + 0x20 + 0x20];
                var4 = 0x00;
                var5 = 0x0b64;
                var6 = msg.sender;
                var7 = var2;
                var8 = var3;
                transfer(var6, var7, var8);
                var4 = 0x01;
                var1 = var4;
                // Error: Could not resolve jump destination!
            } else { revert(memory[0x00:0x00]); }
        } else if (0xd21220a7 > var0) {
            if (var0 == 0xba9a7a56) {
                // Dispatch table entry for MINIMUM_LIQUIDITY()
                var1 = 0x035d;
                var2 = MINIMUM_LIQUIDITY();
                goto label_035D;
            } else if (var0 == 0xbc25cf77) {
                // Dispatch table entry for skim(address)
                var1 = 0x023a;
                var2 = 0x04;
                var3 = msg.data.length - var2;
            
                if (var3 < 0x20) { revert(memory[0x00:0x00]); }
            
                skim(var2, var3);
                stop();
            } else if (var0 == 0xc45a0155) {
                // Dispatch table entry for factory()
                var1 = 0x0339;
                var2 = factory();
                goto label_0339;
            } else { revert(memory[0x00:0x00]); }
        } else if (var0 == 0xd21220a7) {
            // Dispatch table entry for token1()
            var1 = 0x0339;
            var2 = token1();
            goto label_0339;
        } else if (var0 == 0xd505accf) {
            // Dispatch table entry for permit(address,address,uint256,uint256,uint8,bytes32,bytes32)
            var1 = 0x023a;
            var2 = 0x04;
            var3 = msg.data.length - var2;
        
            if (var3 < 0xe0) { revert(memory[0x00:0x00]); }
        
            permit(var2, var3);
            stop();
        } else if (var0 == 0xdd62ed3e) {
            // Dispatch table entry for allowance(address,address)
            var1 = 0x035d;
            var2 = 0x04;
            var3 = msg.data.length - var2;
        
            if (var3 < 0x40) { revert(memory[0x00:0x00]); }
        
            var2 = allowance(var2, var3);
            goto label_035D;
        } else if (var0 == 0xfff6cae9) {
            // Dispatch table entry for sync()
            var1 = 0x023a;
            sync();
            stop();
        } else { revert(memory[0x00:0x00]); }
    }
    
    function swap(var arg0, var arg1) {
        var temp0 = arg0;
        arg0 = msg.data[temp0:temp0 + 0x20];
        var temp1 = arg1;
        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];
        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20] & (0x01 << 0xa0) - 0x01;
        var var1 = temp0 + temp1;
        var var2 = temp0;
        var var3 = var2 + 0x80;
        var var4 = msg.data[var2 + 0x60:var2 + 0x60 + 0x20];
    
        if (var4 > 0x0100000000) { revert(memory[0x00:0x00]); }
    
        var temp2 = var2 + var4;
        var4 = temp2;
    
        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }
    
        var temp3 = var4;
        var temp4 = msg.data[temp3:temp3 + 0x20];
        var4 = temp4;
        var temp5 = var3;
        var3 = temp3 + 0x20;
        var var5 = temp5;
    
        if ((var4 > 0x0100000000) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }
    
        var1 = var3;
        var2 = var4;
    
        if (storage[0x0c] == 0x01) {
            storage[0x0c] = 0x00;
            var3 = 0x061b;
            func_18EB();
            var3 = arg0 > 0x00;
        
            if (var3) {
                if (var3) {
                label_0665:
                    var3 = 0x00;
                    var4 = var3;
                    var5 = 0x0670;
                    var var6;
                    var var7;
                    var5, var6, var7 = getReserves();
                    var4 = var6;
                    var3 = var5;
                    var temp6 = arg0 < var3 & (0x01 << 0x70) - 0x01;
                    var5 = temp6;
                
                    if (!var5) {
                        if (var5) {
                        label_06D0:
                            var5 = 0x00;
                            var6 = var5;
                            var temp7 = (0x01 << 0xa0) - 0x01;
                            var7 = temp7 & storage[0x06];
                            var var8 = temp7 & storage[0x07];
                            var var9 = var7 != var0 & temp7;
                        
                            if (var7 != var0 & temp7) {
                                if (var9) {
                                label_0757:
                                
                                    if (!arg0) {
                                    label_0768:
                                    
                                        if (!arg1) {
                                        label_0779:
                                        
                                            if (!var2) {
                                            label_0834:
                                                var temp8 = memory[0x40:0x60];
                                                memory[temp8:temp8 + 0x20] = 0x70a08231 << 0xe0;
                                                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = address(this);
                                                var9 = var7 & (0x01 << 0xa0) - 0x01;
                                                var var10 = 0x70a08231;
                                                var var11 = temp8 + 0x24;
                                                var var12 = 0x20;
                                                var var13 = memory[0x40:0x60];
                                                var var14 = temp8 - var13 + 0x24;
                                                var var15 = var13;
                                                var var16 = var9;
                                                var var17 = !address(var16).code.length;
                                            
                                                if (var17) { revert(memory[0x00:0x00]); }
                                            
                                                var temp9;
                                                temp9, memory[var13:var13 + var12] = address(var16).staticcall.gas(msg.gas)(memory[var15:var15 + var14]);
                                                var12 = !temp9;
                                            
                                                if (!var12) {
                                                    var9 = memory[0x40:0x60];
                                                    var10 = returndata.length;
                                                
                                                    if (var10 < 0x20) { revert(memory[0x00:0x00]); }
                                                
                                                    var temp10 = memory[var9:var9 + 0x20];
                                                    var temp11 = memory[0x40:0x60];
                                                    memory[temp11:temp11 + 0x20] = 0x70a08231 << 0xe0;
                                                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = address(this);
                                                    var5 = temp10;
                                                    var9 = var8 & (0x01 << 0xa0) - 0x01;
                                                    var10 = 0x70a08231;
                                                    var11 = temp11 + 0x24;
                                                    var12 = 0x20;
                                                    var13 = memory[0x40:0x60];
                                                    var14 = temp11 - var13 + 0x24;
                                                    var15 = var13;
                                                    var16 = var9;
                                                    var17 = !address(var16).code.length;
                                                
                                                    if (var17) { revert(memory[0x00:0x00]); }
                                                
                                                    var temp12;
                                                    temp12, memory[var13:var13 + var12] = address(var16).staticcall.gas(msg.gas)(memory[var15:var15 + var14]);
                                                    var12 = !temp12;
                                                
                                                    if (!var12) {
                                                        var9 = memory[0x40:0x60];
                                                        var10 = returndata.length;
                                                    
                                                        if (var10 < 0x20) { revert(memory[0x00:0x00]); }
                                                    
                                                        var6 = memory[var9:var9 + 0x20];
                                                        var7 = 0x00;
                                                    
                                                        if (var5 > (var3 & (0x01 << 0x70) - 0x01) - arg0) {
                                                            var7 = var5 - ((var3 & (0x01 << 0x70) - 0x01) - arg0);
                                                            var8 = 0x00;
                                                        
                                                            if (var6 > (var4 & (0x01 << 0x70) - 0x01) - arg1) {
                                                            label_0969:
                                                                var8 = var6 - ((var4 & (0x01 << 0x70) - 0x01) - arg1);
                                                                var9 = var7 > 0x00;
                                                            
                                                                if (var9) {
                                                                label_0989:
                                                                
                                                                    if (var9) {
                                                                    label_09C4:
                                                                        var9 = 0x00;
                                                                        var10 = 0x09f8;
                                                                        var11 = 0x09da;
                                                                        var12 = var7;
                                                                        var13 = 0x03;
                                                                        var11 = func_1B67(var12, var13);
                                                                        var10 = func_09DA(var5, var11);
                                                                        var9 = var10;
                                                                        var10 = 0x00;
                                                                        var11 = 0x0a10;
                                                                        var12 = 0x09da;
                                                                        var13 = var8;
                                                                        var14 = 0x03;
                                                                        var12 = func_1B67(var13, var14);
                                                                        var11 = func_09DA(var6, var12);
                                                                        var10 = var11;
                                                                        var11 = 0x0a41;
                                                                        var12 = 0x0f4240;
                                                                        var13 = 0x0a35;
                                                                        var temp13 = (0x01 << 0x70) - 0x01;
                                                                        var14 = temp13 & var3;
                                                                        var15 = var4 & temp13;
                                                                        var13 = func_1B67(var14, var15);
                                                                        var11 = func_0A35(var12, var13);
                                                                        var12 = 0x0a51;
                                                                        var13 = var9;
                                                                        var14 = var10;
                                                                        var12 = func_1B67(var13, var14);
                                                                    
                                                                        if (var12 >= var11) {
                                                                            var9 = 0x0aa1;
                                                                            var10 = var7;
                                                                            var11 = var8;
                                                                            var12 = var3;
                                                                            var13 = var4;
                                                                            func_1C1A(var10, var11, var12, var13);
                                                                            var temp14 = memory[0x40:0x60];
                                                                            memory[temp14:temp14 + 0x20] = var7;
                                                                            memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = var8;
                                                                            memory[temp14 + 0x40:temp14 + 0x40 + 0x20] = arg0;
                                                                            memory[temp14 + 0x60:temp14 + 0x60 + 0x20] = arg1;
                                                                            var temp15 = memory[0x40:0x60];
                                                                            log(memory[temp15:temp15 + temp14 - temp15 + 0x80], [0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822, msg.sender, stack[-9] & (0x01 << 0xa0) - 0x01]);
                                                                            storage[0x0c] = 0x01;
                                                                            return;
                                                                        } else {
                                                                            var temp16 = memory[0x40:0x60];
                                                                            memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;
                                                                            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;
                                                                            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x0c;
                                                                            memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x556e697377617056323a204b << 0xa0;
                                                                            var temp17 = memory[0x40:0x60];
                                                                            revert(memory[temp17:temp17 + temp16 - temp17 + 0x64]);
                                                                        }
                                                                    } else {
                                                                    label_098E:
                                                                        var temp18 = memory[0x40:0x60];
                                                                        memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;
                                                                        var temp19 = temp18 + 0x04;
                                                                        var temp20 = temp19 + 0x20;
                                                                        memory[temp19:temp19 + 0x20] = temp20 - temp19;
                                                                        memory[temp20:temp20 + 0x20] = 0x24;
                                                                        var temp21 = temp20 + 0x20;
                                                                        memory[temp21:temp21 + 0x24] = code[0x2799:0x27bd];
                                                                        var temp22 = memory[0x40:0x60];
                                                                        revert(memory[temp22:temp22 + (temp21 + 0x40) - temp22]);
                                                                    }
                                                                } else {
                                                                label_0984:
                                                                
                                                                    if (var8 > 0x00) { goto label_09C4; }
                                                                    else { goto label_098E; }
                                                                }
                                                            } else {
                                                            label_0963:
                                                                var9 = 0x00;
                                                                var8 = var9;
                                                                var9 = var7 > 0x00;
                                                            
                                                                if (var9) { goto label_0989; }
                                                                else { goto label_0984; }
                                                            }
                                                        } else {
                                                            var8 = 0x00;
                                                            var7 = var8;
                                                            var8 = 0x00;
                                                        
                                                            if (var6 > (var4 & (0x01 << 0x70) - 0x01) - arg1) { goto label_0969; }
                                                            else { goto label_0963; }
                                                        }
                                                    } else {
                                                        var temp23 = returndata.length;
                                                        memory[0x00:0x00 + temp23] = returndata[0x00:0x00 + temp23];
                                                        revert(memory[0x00:0x00 + returndata.length]);
                                                    }
                                                } else {
                                                    var temp24 = returndata.length;
                                                    memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];
                                                    revert(memory[0x00:0x00 + returndata.length]);
                                                }
                                            } else {
                                                var9 = var0 & (0x01 << 0xa0) - 0x01;
                                                var10 = 0x10d1e85c;
                                                var temp25 = var2;
                                                var temp26 = memory[0x40:0x60];
                                                memory[temp26:temp26 + 0x20] = (var10 & 0xffffffff) << 0xe0;
                                                var temp27 = temp26 + 0x04;
                                                memory[temp27:temp27 + 0x20] = msg.sender;
                                                var temp28 = temp27 + 0x20;
                                                memory[temp28:temp28 + 0x20] = arg0;
                                                var temp29 = temp28 + 0x20;
                                                memory[temp29:temp29 + 0x20] = arg1;
                                                var temp30 = temp29 + 0x20;
                                                var temp31 = temp30 + 0x20;
                                                memory[temp30:temp30 + 0x20] = temp31 - temp27;
                                                memory[temp31:temp31 + 0x20] = temp25;
                                                var temp32 = temp31 + 0x20;
                                                memory[temp32:temp32 + temp25] = msg.data[var1:var1 + temp25];
                                                memory[temp32 + temp25:temp32 + temp25 + 0x20] = 0x00;
                                                var11 = temp32 + (temp25 + 0x1f & ~0x1f);
                                                var12 = 0x00;
                                                var13 = memory[0x40:0x60];
                                                var14 = var11 - var13;
                                                var15 = var13;
                                                var16 = 0x00;
                                                var17 = var9;
                                                var var18 = !address(var17).code.length;
                                            
                                                if (var18) { revert(memory[0x00:0x00]); }
                                            
                                                var temp33;
                                                temp33, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas).value(var16)(memory[var15:var15 + var14]);
                                                var12 = !temp33;
                                            
                                                if (!var12) { goto label_0834; }
                                            
                                                var temp34 = returndata.length;
                                                memory[0x00:0x00 + temp34] = returndata[0x00:0x00 + temp34];
                                                revert(memory[0x00:0x00 + returndata.length]);
                                            }
                                        } else {
                                            var9 = 0x0779;
                                            var10 = var8;
                                            var11 = var0;
                                            var12 = arg1;
                                            func_19CD(var10, var11, var12);
                                            goto label_0779;
                                        }
                                    } else {
                                        var9 = 0x0768;
                                        var10 = var7;
                                        var11 = var0;
                                        var12 = arg0;
                                        func_19CD(var10, var11, var12);
                                        goto label_0768;
                                    }
                                } else {
                                label_0713:
                                    var temp35 = memory[0x40:0x60];
                                    memory[temp35:temp35 + 0x20] = 0x461bcd << 0xe5;
                                    memory[temp35 + 0x04:temp35 + 0x04 + 0x20] = 0x20;
                                    memory[temp35 + 0x24:temp35 + 0x24 + 0x20] = 0x15;
                                    memory[temp35 + 0x44:temp35 + 0x44 + 0x20] = 0x556e697377617056323a20494e56414c49445f544f << 0x58;
                                    var temp36 = memory[0x40:0x60];
                                    revert(memory[temp36:temp36 + temp35 - temp36 + 0x64]);
                                }
                            } else if (var0 & (0x01 << 0xa0) - 0x01 != var8 & (0x01 << 0xa0) - 0x01) { goto label_0757; }
                            else { goto label_0713; }
                        } else {
                        label_069A:
                            var temp37 = memory[0x40:0x60];
                            memory[temp37:temp37 + 0x20] = 0x461bcd << 0xe5;
                            var temp38 = temp37 + 0x04;
                            var temp39 = temp38 + 0x20;
                            memory[temp38:temp38 + 0x20] = temp39 - temp38;
                            memory[temp39:temp39 + 0x20] = 0x21;
                            var temp40 = temp39 + 0x20;
                            memory[temp40:temp40 + 0x21] = code[0x27bd:0x27de];
                            var temp41 = memory[0x40:0x60];
                            revert(memory[temp41:temp41 + (temp40 + 0x40) - temp41]);
                        }
                    } else if (arg1 < var4 & (0x01 << 0x70) - 0x01) { goto label_06D0; }
                    else { goto label_069A; }
                } else {
                label_062F:
                    var temp42 = memory[0x40:0x60];
                    memory[temp42:temp42 + 0x20] = 0x461bcd << 0xe5;
                    var temp43 = temp42 + 0x04;
                    var temp44 = temp43 + 0x20;
                    memory[temp43:temp43 + 0x20] = temp44 - temp43;
                    memory[temp44:temp44 + 0x20] = 0x25;
                    var temp45 = temp44 + 0x20;
                    memory[temp45:temp45 + 0x25] = code[0x2774:0x2799];
                    var temp46 = memory[0x40:0x60];
                    revert(memory[temp46:temp46 + (temp45 + 0x40) - temp46]);
                }
            } else if (arg1 > 0x00) { goto label_0665; }
            else { goto label_062F; }
        } else {
            var temp47 = memory[0x40:0x60];
            memory[temp47:temp47 + 0x20] = 0x461bcd << 0xe5;
            memory[temp47 + 0x04:temp47 + 0x04 + 0x20] = 0x20;
            memory[temp47 + 0x24:temp47 + 0x24 + 0x20] = 0x11;
            memory[temp47 + 0x44:temp47 + 0x44 + 0x20] = 0x155b9a5cddd85c158c8e881313d0d2d151 << 0x7a;
            var temp48 = memory[0x40:0x60];
            revert(memory[temp48:temp48 + temp47 - temp48 + 0x64]);
        }
    }
    
    function approve(var arg0, var arg1) returns (var r0) {
        var temp0 = arg0;
        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;
        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];
        var var0 = 0x00;
        var var1 = 0x0b64;
        var var2 = msg.sender;
        var var3 = arg0;
        var var4 = arg1;
        func_2110(var2, var3, var4);
        return 0x01;
    }
    
    function transferFrom(var arg0, var arg1) returns (var r0) {
        var temp0 = (0x01 << 0xa0) - 0x01;
        var temp1 = arg0;
        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];
        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];
        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];
        var var1 = 0x00;
        memory[var1:var1 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;
        memory[0x20:0x40] = 0x02;
        var temp2 = keccak256(memory[var1:var1 + 0x40]);
        memory[var1:var1 + 0x20] = msg.sender;
        memory[0x20:0x40] = temp2;
    
        if (storage[keccak256(memory[var1:var1 + 0x40])] == ~0x00) {
        label_0C08:
            var var2 = 0x0c13;
            var var3 = arg0;
            var var4 = arg1;
            var var5 = var0;
            transfer(var3, var4, var5);
            return 0x01;
        } else {
            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;
            memory[0x20:0x40] = 0x02;
            var temp3 = keccak256(memory[0x00:0x40]);
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = temp3;
            var2 = 0x0be3;
            var3 = storage[keccak256(memory[0x00:0x40])];
            var4 = var0;
            var2 = func_1BCA(var3, var4);
            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;
            memory[0x20:0x40] = 0x02;
            var temp4 = keccak256(memory[0x00:0x40]);
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = temp4;
            storage[keccak256(memory[0x00:0x40])] = var2;
            goto label_0C08;
        }
    }
    
    function initialize(var arg0, var arg1) {
        var temp0 = (0x01 << 0xa0) - 0x01;
        var temp1 = arg0;
        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];
        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;
    
        if (msg.sender == storage[0x05] & (0x01 << 0xa0) - 0x01) {
            var temp2 = (0x01 << 0xa0) - 0x01;
            var temp3 = ~((0x01 << 0xa0) - 0x01);
            storage[0x06] = (temp3 & storage[0x06]) | (temp2 & arg0);
            storage[0x07] = (storage[0x07] & temp3) | (temp2 & arg1);
            return;
        } else {
            var temp4 = memory[0x40:0x60];
            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;
            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;
            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x14;
            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x2ab734b9bbb0b82b191d102327a92124a22222a7 << 0x61;
            var temp5 = memory[0x40:0x60];
            revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);
        }
    }
    
    function mint(var arg0, var arg1) returns (var r0) {
        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;
        arg1 = 0x00;
    
        if (storage[0x0c] == 0x01) {
            var var0 = 0x00;
            storage[0x0c] = var0;
            var var1 = var0;
            var var2 = 0x0d39;
            var var3;
            var var4;
            var2, var3, var4 = getReserves();
            var temp0 = memory[0x40:0x60];
            memory[temp0:temp0 + 0x20] = 0x70a08231 << 0xe0;
            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);
            var0 = var2;
            var1 = var3;
            var2 = 0x00;
            var3 = storage[0x06] & (0x01 << 0xa0) - 0x01;
            var4 = 0x70a08231;
            var var5 = temp0 + 0x24;
            var var6 = 0x20;
            var var7 = memory[0x40:0x60];
            var var8 = temp0 - var7 + 0x24;
            var var9 = var7;
            var var10 = var3;
            var var11 = !address(var10).code.length;
        
            if (var11) { revert(memory[0x00:0x00]); }
        
            var temp1;
            temp1, memory[var7:var7 + var6] = address(var10).staticcall.gas(msg.gas)(memory[var9:var9 + var8]);
            var6 = !temp1;
        
            if (!var6) {
                var3 = memory[0x40:0x60];
                var4 = returndata.length;
            
                if (var4 < 0x20) { revert(memory[0x00:0x00]); }
            
                var temp2 = memory[var3:var3 + 0x20];
                var temp3 = memory[0x40:0x60];
                memory[temp3:temp3 + 0x20] = 0x70a08231 << 0xe0;
                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);
                var2 = temp2;
                var3 = 0x00;
                var4 = storage[0x07] & (0x01 << 0xa0) - 0x01;
                var5 = 0x70a08231;
                var6 = temp3 + 0x24;
                var7 = 0x20;
                var8 = memory[0x40:0x60];
                var9 = temp3 - var8 + 0x24;
                var10 = var8;
                var11 = var4;
                var var12 = !address(var11).code.length;
            
                if (var12) { revert(memory[0x00:0x00]); }
            
                var temp4;
                temp4, memory[var8:var8 + var7] = address(var11).staticcall.gas(msg.gas)(memory[var10:var10 + var9]);
                var7 = !temp4;
            
                if (!var7) {
                    var4 = memory[0x40:0x60];
                    var5 = returndata.length;
                
                    if (var5 < 0x20) { revert(memory[0x00:0x00]); }
                
                    var3 = memory[var4:var4 + 0x20];
                    var4 = 0x00;
                    var5 = 0x0e53;
                    var6 = var2;
                    var7 = var0 & (0x01 << 0x70) - 0x01;
                    var5 = func_1BCA(var6, var7);
                    var4 = var5;
                    var5 = 0x00;
                    var6 = 0x0e70;
                    var7 = var3;
                    var8 = var1 & (0x01 << 0x70) - 0x01;
                    var6 = func_1BCA(var7, var8);
                    var5 = var6;
                    var6 = 0x00;
                    var7 = 0x0e7e;
                    var8 = var0;
                    var9 = var1;
                    var7 = func_222C(var8, var9);
                    var temp5 = var7;
                    var7 = storage[0x00];
                    var6 = temp5;
                
                    if (var7) {
                        var8 = 0x0f07;
                        var9 = var0 & (0x01 << 0x70) - 0x01;
                        var10 = 0x0ed8;
                        var11 = var4;
                        var12 = var7;
                        var10 = func_1B67(var11, var12);
                        var8 = func_0ED8(var1, var5, var7, var9, var10);
                        arg1 = var8;
                    
                        if (arg1 > 0x00) {
                            var8 = 0x0f53;
                            var9 = arg0;
                            var10 = arg1;
                            func_23DC(var9, var10);
                            var8 = 0x0f5f;
                            var9 = var2;
                            var10 = var3;
                            var11 = var0;
                            var12 = var1;
                            func_248A(var9, var10, var11, var12);
                        
                            if (!var6) {
                            label_0F8F:
                                var temp6 = memory[0x40:0x60];
                                memory[temp6:temp6 + 0x20] = var4;
                                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;
                                var temp7 = memory[0x40:0x60];
                                log(memory[temp7:temp7 + temp6 - temp7 + 0x40], [0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f, msg.sender]);
                                storage[0x0c] = 0x01;
                                return arg1;
                            } else {
                                var temp8 = storage[0x08];
                                var8 = 0x0f8b;
                                var temp9 = (0x01 << 0x70) - 0x01;
                                var9 = temp8 & temp9;
                                var10 = temp8 / (0x01 << 0x70) & temp9;
                                var8 = func_1B67(var9, var10);
                                storage[0x0b] = var8;
                                goto label_0F8F;
                            }
                        } else {
                            var temp10 = memory[0x40:0x60];
                            memory[temp10:temp10 + 0x20] = 0x461bcd << 0xe5;
                            var temp11 = temp10 + 0x04;
                            var temp12 = temp11 + 0x20;
                            memory[temp11:temp11 + 0x20] = temp12 - temp11;
                            memory[temp12:temp12 + 0x20] = 0x28;
                            var temp13 = temp12 + 0x20;
                            memory[temp13:temp13 + 0x28] = code[0x2806:0x282e];
                            var temp14 = memory[0x40:0x60];
                            revert(memory[temp14:temp14 + (temp13 + 0x40) - temp14]);
                        }
                    } else {
                        var8 = 0x0ea7;
                        var9 = 0x03e8;
                        var10 = 0x09ec;
                        var11 = 0x0ea2;
                        var12 = var4;
                        var var13 = var5;
                        var11 = func_1B67(var12, var13);
                        var10 = func_0EA2(var11);
                        var temp15 = var9;
                        var9 = var10;
                        var10 = temp15;
                        var8 = func_1BCA(var9, var10);
                        // Error: Could not resolve method call return address!
                    }
                } else {
                    var temp16 = returndata.length;
                    memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];
                    revert(memory[0x00:0x00 + returndata.length]);
                }
            } else {
                var temp17 = returndata.length;
                memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];
                revert(memory[0x00:0x00 + returndata.length]);
            }
        } else {
            var temp18 = memory[0x40:0x60];
            memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;
            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;
            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x11;
            memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x155b9a5cddd85c158c8e881313d0d2d151 << 0x7a;
            var temp19 = memory[0x40:0x60];
            revert(memory[temp19:temp19 + temp18 - temp19 + 0x64]);
        }
    }
    
    function balanceOf(var arg0, var arg1) returns (var arg0) {
        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;
        memory[0x20:0x40] = 0x01;
        memory[0x00:0x20] = arg0;
        return storage[keccak256(memory[0x00:0x40])];
    }
    
    function nonces(var arg0, var arg1) returns (var arg0) {
        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;
        memory[0x20:0x40] = 0x04;
        memory[0x00:0x20] = arg0;
        return storage[keccak256(memory[0x00:0x40])];
    }
    
    function burn(var arg0, var arg1) returns (var r0, var arg0) {
        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;
        arg1 = 0x00;
        var var0 = arg1;
    
        if (storage[0x0c] == 0x01) {
            var var1 = 0x00;
            storage[0x0c] = var1;
            var var2 = var1;
            var var3 = 0x1064;
            var var4;
            var var5;
            var3, var4, var5 = getReserves();
            var temp0 = memory[0x40:0x60];
            memory[temp0:temp0 + 0x20] = 0x70a08231 << 0xe0;
            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);
            var1 = var3;
            var2 = var4;
            var temp1 = (0x01 << 0xa0) - 0x01;
            var3 = temp1 & storage[0x06];
            var4 = temp1 & storage[0x07];
            var5 = 0x00;
            var var6 = var3;
            var var7 = 0x70a08231;
            var var8 = temp0 + 0x24;
            var var9 = 0x20;
            var var10 = memory[0x40:0x60];
            var var11 = temp0 - var10 + 0x24;
            var var12 = var10;
            var var13 = var6;
            var var14 = !address(var13).code.length;
        
            if (var14) { revert(memory[0x00:0x00]); }
        
            var temp2;
            temp2, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);
            var9 = !temp2;
        
            if (!var9) {
                var6 = memory[0x40:0x60];
                var7 = returndata.length;
            
                if (var7 < 0x20) { revert(memory[0x00:0x00]); }
            
                var temp3 = memory[var6:var6 + 0x20];
                var temp4 = memory[0x40:0x60];
                memory[temp4:temp4 + 0x20] = 0x70a08231 << 0xe0;
                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = address(this);
                var5 = temp3;
                var6 = 0x00;
                var7 = var4 & (0x01 << 0xa0) - 0x01;
                var8 = 0x70a08231;
                var9 = temp4 + 0x24;
                var10 = 0x20;
                var11 = memory[0x40:0x60];
                var12 = temp4 - var11 + 0x24;
                var13 = var11;
                var14 = var7;
                var var15 = !address(var14).code.length;
            
                if (var15) { revert(memory[0x00:0x00]); }
            
                var temp5;
                temp5, memory[var11:var11 + var10] = address(var14).staticcall.gas(msg.gas)(memory[var13:var13 + var12]);
                var10 = !temp5;
            
                if (!var10) {
                    var7 = memory[0x40:0x60];
                    var8 = returndata.length;
                
                    if (var8 < 0x20) { revert(memory[0x00:0x00]); }
                
                    var temp6 = memory[var7:var7 + 0x20];
                    var8 = 0x00;
                    memory[var8:var8 + 0x20] = address(this);
                    memory[0x20:0x40] = 0x01;
                    var7 = storage[keccak256(memory[var8:var8 + 0x40])];
                    var6 = temp6;
                    var9 = 0x1181;
                    var10 = var1;
                    var11 = var2;
                    var9 = func_222C(var10, var11);
                    var temp7 = var9;
                    var9 = storage[0x00];
                    var8 = temp7;
                    var10 = var9;
                    var11 = 0x1198;
                    var12 = var7;
                    var13 = var5;
                    var11 = func_1B67(var12, var13);
                
                    if (!var10) { assert(); }
                
                    arg1 = var11 / var10;
                    var10 = var9;
                    var11 = 0x11b3;
                    var12 = var7;
                    var13 = var6;
                    var11 = func_1B67(var12, var13);
                
                    if (!var10) { assert(); }
                
                    var0 = var11 / var10;
                    var10 = arg1 > 0x00;
                
                    if (!var10) {
                        if (var10) {
                        label_1208:
                            var10 = 0x1212;
                            var11 = address(this);
                            var12 = var7;
                            func_264F(var11, var12);
                            var10 = 0x121d;
                            var11 = var3;
                            var12 = arg0;
                            var13 = arg1;
                            func_19CD(var11, var12, var13);
                            var10 = 0x1228;
                            var11 = var4;
                            var12 = arg0;
                            var13 = var0;
                            func_19CD(var11, var12, var13);
                            var temp8 = memory[0x40:0x60];
                            memory[temp8:temp8 + 0x20] = 0x70a08231 << 0xe0;
                            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = address(this);
                            var10 = var3 & (0x01 << 0xa0) - 0x01;
                            var11 = 0x70a08231;
                            var12 = temp8 + 0x24;
                            var13 = 0x20;
                            var14 = memory[0x40:0x60];
                            var15 = temp8 - var14 + 0x24;
                            var var16 = var14;
                            var var17 = var10;
                            var var18 = !address(var17).code.length;
                        
                            if (var18) { revert(memory[0x00:0x00]); }
                        
                            var temp9;
                            temp9, memory[var14:var14 + var13] = address(var17).staticcall.gas(msg.gas)(memory[var16:var16 + var15]);
                            var13 = !temp9;
                        
                            if (!var13) {
                                var10 = memory[0x40:0x60];
                                var11 = returndata.length;
                            
                                if (var11 < 0x20) { revert(memory[0x00:0x00]); }
                            
                                var temp10 = memory[var10:var10 + 0x20];
                                var temp11 = memory[0x40:0x60];
                                memory[temp11:temp11 + 0x20] = 0x70a08231 << 0xe0;
                                memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = address(this);
                                var5 = temp10;
                                var10 = var4 & (0x01 << 0xa0) - 0x01;
                                var11 = 0x70a08231;
                                var12 = temp11 + 0x24;
                                var13 = 0x20;
                                var14 = memory[0x40:0x60];
                                var15 = temp11 - var14 + 0x24;
                                var16 = var14;
                                var17 = var10;
                                var18 = !address(var17).code.length;
                            
                                if (var18) { revert(memory[0x00:0x00]); }
                            
                                var temp12;
                                temp12, memory[var14:var14 + var13] = address(var17).staticcall.gas(msg.gas)(memory[var16:var16 + var15]);
                                var13 = !temp12;
                            
                                if (!var13) {
                                    var10 = memory[0x40:0x60];
                                    var11 = returndata.length;
                                
                                    if (var11 < 0x20) { revert(memory[0x00:0x00]); }
                                
                                    var temp13 = memory[var10:var10 + 0x20];
                                    var6 = temp13;
                                    var10 = 0x131e;
                                    var11 = var5;
                                    var12 = var6;
                                    var13 = var1;
                                    var14 = var2;
                                    func_248A(var11, var12, var13, var14);
                                
                                    if (!var8) {
                                    label_134E:
                                        var temp14 = memory[0x40:0x60];
                                        memory[temp14:temp14 + 0x20] = arg1;
                                        memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = var0;
                                        var temp15 = memory[0x40:0x60];
                                        log(memory[temp15:temp15 + temp14 - temp15 + 0x40], [0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496, msg.sender, stack[-12] & (0x01 << 0xa0) - 0x01]);
                                        storage[0x0c] = 0x01;
                                        arg0 = var0;
                                        r0 = arg1;
                                        return r0, arg0;
                                    } else {
                                        var temp16 = storage[0x08];
                                        var10 = 0x134a;
                                        var temp17 = (0x01 << 0x70) - 0x01;
                                        var11 = temp16 & temp17;
                                        var12 = temp16 / (0x01 << 0x70) & temp17;
                                        var10 = func_1B67(var11, var12);
                                        storage[0x0b] = var10;
                                        goto label_134E;
                                    }
                                } else {
                                    var temp18 = returndata.length;
                                    memory[0x00:0x00 + temp18] = returndata[0x00:0x00 + temp18];
                                    revert(memory[0x00:0x00 + returndata.length]);
                                }
                            } else {
                                var temp19 = returndata.length;
                                memory[0x00:0x00 + temp19] = returndata[0x00:0x00 + temp19];
                                revert(memory[0x00:0x00 + returndata.length]);
                            }
                        } else {
                        label_11D2:
                            var temp20 = memory[0x40:0x60];
                            memory[temp20:temp20 + 0x20] = 0x461bcd << 0xe5;
                            var temp21 = temp20 + 0x04;
                            var temp22 = temp21 + 0x20;
                            memory[temp21:temp21 + 0x20] = temp22 - temp21;
                            memory[temp22:temp22 + 0x20] = 0x28;
                            var temp23 = temp22 + 0x20;
                            memory[temp23:temp23 + 0x28] = code[0x27de:0x2806];
                            var temp24 = memory[0x40:0x60];
                            revert(memory[temp24:temp24 + (temp23 + 0x40) - temp24]);
                        }
                    } else if (var0 > 0x00) { goto label_1208; }
                    else { goto label_11D2; }
                } else {
                    var temp25 = returndata.length;
                    memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];
                    revert(memory[0x00:0x00 + returndata.length]);
                }
            } else {
                var temp26 = returndata.length;
                memory[0x00:0x00 + temp26] = returndata[0x00:0x00 + temp26];
                revert(memory[0x00:0x00 + returndata.length]);
            }
        } else {
            var temp27 = memory[0x40:0x60];
            memory[temp27:temp27 + 0x20] = 0x461bcd << 0xe5;
            memory[temp27 + 0x04:temp27 + 0x04 + 0x20] = 0x20;
            memory[temp27 + 0x24:temp27 + 0x24 + 0x20] = 0x11;
            memory[temp27 + 0x44:temp27 + 0x44 + 0x20] = 0x155b9a5cddd85c158c8e881313d0d2d151 << 0x7a;
            var temp28 = memory[0x40:0x60];
            revert(memory[temp28:temp28 + temp27 - temp28 + 0x64]);
        }
    }
    
    function skim(var arg0, var arg1) {
        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;
    
        if (storage[0x0c] == 0x01) {
            storage[0x0c] = 0x00;
            var temp0 = memory[0x40:0x60];
            memory[temp0:temp0 + 0x20] = 0x70a08231 << 0xe0;
            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);
            var temp1 = (0x01 << 0xa0) - 0x01;
            arg1 = temp1 & storage[0x06];
            var var0 = storage[0x07] & temp1;
            var var1 = 0x14db;
            var var2 = arg1;
            var var3 = arg0;
            var var4 = 0x14d6;
            var var5 = storage[0x08] & (0x01 << 0x70) - 0x01;
            var var6 = var2;
            var var7 = 0x70a08231;
            var var8 = temp0 + 0x24;
            var var9 = 0x20;
            var var10 = memory[0x40:0x60];
            var var11 = temp0 - var10 + 0x24;
            var var12 = var10;
            var var13 = var6;
            var var14 = !address(var13).code.length;
        
            if (var14) { revert(memory[0x00:0x00]); }
        
            var4 = func_149E(var5, var6, var7, var8, var9, var10, var11, var12, var13, var14);
            func_14D6(var2, var3, var4);
            var temp2 = memory[0x40:0x60];
            memory[temp2:temp2 + 0x20] = 0x70a08231 << 0xe0;
            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = address(this);
            var1 = 0x1542;
            var2 = var0;
            var3 = arg0;
            var4 = 0x14d6;
            var5 = storage[0x08] / (0x01 << 0x70) & (0x01 << 0x70) - 0x01;
            var6 = var2 & (0x01 << 0xa0) - 0x01;
            var7 = 0x70a08231;
            var8 = temp2 + 0x24;
            var9 = 0x20;
            var10 = memory[0x40:0x60];
            var11 = temp2 - var10 + 0x24;
            var12 = var10;
            var13 = var6;
            var14 = !address(var13).code.length;
        
            if (var14) { revert(memory[0x00:0x00]); }
        
            var4 = func_149E(var5, var6, var7, var8, var9, var10, var11, var12, var13, var14);
            func_14D6(var2, var3, var4);
            storage[0x0c] = 0x01;
            return;
        } else {
            var temp3 = memory[0x40:0x60];
            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;
            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;
            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x11;
            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x155b9a5cddd85c158c8e881313d0d2d151 << 0x7a;
            var temp4 = memory[0x40:0x60];
            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);
        }
    }
    
    function permit(var arg0, var arg1) {
        var temp0 = (0x01 << 0xa0) - 0x01;
        var temp1 = arg0;
        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];
        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];
        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];
        var var1 = msg.data[temp1 + 0x60:temp1 + 0x60 + 0x20];
        var var2 = msg.data[temp1 + 0x80:temp1 + 0x80 + 0x20] & 0xff;
        var var3 = msg.data[temp1 + 0xa0:temp1 + 0xa0 + 0x20];
        var var4 = msg.data[temp1 + 0xc0:temp1 + 0xc0 + 0x20];
    
        if (var1 >= block.timestamp) {
            var temp2 = storage[0x03];
            var temp3 = (0x01 << 0xa0) - 0x01;
            var temp4 = arg0 & temp3;
            memory[0x00:0x20] = temp4;
            memory[0x20:0x40] = 0x04;
            var temp5 = keccak256(memory[0x00:0x40]);
            var temp6 = storage[temp5];
            storage[temp5] = temp6 + 0x01;
            var temp7 = memory[0x40:0x60];
            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = temp4;
            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = arg1 & temp3;
            memory[temp7 + 0x80:temp7 + 0x80 + 0x20] = var0;
            memory[temp7 + 0xa0:temp7 + 0xa0 + 0x20] = temp6;
            memory[temp7 + 0xc0:temp7 + 0xc0 + 0x20] = var1;
            var temp8 = memory[0x40:0x60];
            memory[temp8:temp8 + 0x20] = temp7 - temp8 + 0xc0;
            memory[0x40:0x60] = temp7 + 0xe0;
            var temp9 = keccak256(memory[temp8 + 0x20:temp8 + 0x20 + memory[temp8:temp8 + 0x20]]);
            memory[temp7 + 0x0100:temp7 + 0x0100 + 0x20] = 0x1901 << 0xf0;
            memory[temp7 + 0x0102:temp7 + 0x0102 + 0x20] = temp2;
            memory[temp7 + 0x0122:temp7 + 0x0122 + 0x20] = temp9;
            var temp10 = memory[0x40:0x60];
            memory[temp10:temp10 + 0x20] = temp7 - temp10 + 0x0122;
            var temp11 = temp7 + 0x0142;
            memory[0x40:0x60] = temp11;
            var temp12 = keccak256(memory[temp10 + 0x20:temp10 + 0x20 + memory[temp10:temp10 + 0x20]]);
            var var5 = temp12;
            memory[temp11:temp11 + 0x20] = 0x00;
            var temp13 = temp7 + 0x0162;
            memory[0x40:0x60] = temp13;
            memory[temp13:temp13 + 0x20] = var5;
            memory[temp7 + 0x0182:temp7 + 0x0182 + 0x20] = var2 & 0xff;
            memory[temp7 + 0x01a2:temp7 + 0x01a2 + 0x20] = var3;
            memory[temp7 + 0x01c2:temp7 + 0x01c2 + 0x20] = var4;
            var temp14 = memory[0x40:0x60];
            var var6 = 0x00;
            var var7 = 0x01;
            var var8 = temp7 + 0x01e2;
            var temp15;
            temp15, memory[temp14 + ~0x1f:temp14 + ~0x1f + 0x20] = address(var7).staticcall.gas(msg.gas)(memory[temp14:temp14 + temp7 - temp14 + 0x01e2]);
            var var9 = !temp15;
        
            if (!var9) {
                var6 = memory[memory[0x40:0x60] + ~0x1f:memory[0x40:0x60] + ~0x1f + 0x20];
                var7 = !!(var6 & (0x01 << 0xa0) - 0x01);
            
                if (!(var6 & (0x01 << 0xa0) - 0x01)) {
                    if (var7) {
                    label_1756:
                        var7 = 0x1761;
                        var8 = arg0;
                        var9 = arg1;
                        var var10 = var0;
                        func_2110(var8, var9, var10);
                        return;
                    } else {
                    label_170A:
                        var temp16 = memory[0x40:0x60];
                        memory[temp16:temp16 + 0x20] = 0x461bcd << 0xe5;
                        memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = 0x20;
                        memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x1c;
                        memory[temp16 + 0x44:temp16 + 0x44 + 0x20] = 0x556e697377617056323a20494e56414c49445f5349474e415455524500000000;
                        var temp17 = memory[0x40:0x60];
                        revert(memory[temp17:temp17 + temp16 - temp17 + 0x64]);
                    }
                } else if (var6 & (0x01 << 0xa0) - 0x01 == arg0 & (0x01 << 0xa0) - 0x01) { goto label_1756; }
                else { goto label_170A; }
            } else {
                var temp18 = returndata.length;
                memory[0x00:0x00 + temp18] = returndata[0x00:0x00 + temp18];
                revert(memory[0x00:0x00 + returndata.length]);
            }
        } else {
            var temp19 = memory[0x40:0x60];
            memory[temp19:temp19 + 0x20] = 0x461bcd << 0xe5;
            memory[temp19 + 0x04:temp19 + 0x04 + 0x20] = 0x20;
            memory[temp19 + 0x24:temp19 + 0x24 + 0x20] = 0x12;
            memory[temp19 + 0x44:temp19 + 0x44 + 0x20] = 0x155b9a5cddd85c158c8e8811561412549151 << 0x72;
            var temp20 = memory[0x40:0x60];
            revert(memory[temp20:temp20 + temp19 - temp20 + 0x64]);
        }
    }
    
    function allowance(var arg0, var arg1) returns (var arg0) {
        var temp0 = (0x01 << 0xa0) - 0x01;
        var temp1 = arg0;
        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];
        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;
        memory[0x20:0x40] = 0x02;
        memory[0x00:0x20] = arg0;
        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);
        memory[0x00:0x20] = arg1;
        return storage[keccak256(memory[0x00:0x40])];
    }
    
    function func_09DA(var arg0, var arg1) returns (var r0) {
        var var0 = 0x09ec;
        var var1 = arg0;
        var var2 = 0x03e8;
        var0 = func_1B67(var1, var2);
        var temp0 = arg1;
        arg1 = var0;
        var0 = temp0;
        r0 = func_1BCA(arg1, var0);
        // Error: Could not resolve method call return address!
    }
    
    function func_0A35(var arg0, var arg1) returns (var r0) {
        var temp0 = arg0;
        arg0 = arg1;
        arg1 = temp0;
        r0 = func_1B67(arg0, arg1);
        // Error: Could not resolve method call return address!
    }
    
    function name() returns (var r0) {
        var temp0 = memory[0x40:0x60];
        r0 = temp0;
        memory[0x40:0x60] = r0 + 0x40;
        memory[r0:r0 + 0x20] = 0x0a;
        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x2ab734b9bbb0b8102b19 << 0xb1;
        return r0;
    }
    
    function getReserves() returns (var r0, var r1, var r2) {
        var temp0 = storage[0x08];
        var temp1 = (0x01 << 0x70) - 0x01;
        r0 = temp0 & temp1;
        r1 = temp1 & temp0 / (0x01 << 0x70);
        r2 = temp0 / (0x01 << 0xe0) & 0xffffffff;
        return r0, r1, r2;
    }
    
    function token0() returns (var r0) { return storage[0x06] & (0x01 << 0xa0) - 0x01; }
    
    function totalSupply() returns (var r0) { return storage[0x00]; }
    
    function PERMIT_TYPEHASH() returns (var r0) { return 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9; }
    
    function decimals() returns (var r0) { return 0x12; }
    
    function DOMAIN_SEPARATOR() returns (var r0) { return storage[0x03]; }
    
    function price0CumulativeLast() returns (var r0) { return storage[0x09]; }
    
    function price1CumulativeLast() returns (var r0) { return storage[0x0a]; }
    
    function func_0EA2(var arg0) returns (var r0) {
        r0 = func_238A(arg0);
        // Error: Could not resolve method call return address!
    }
    
    function func_0ED8(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {
        if (!arg3) { assert(); }
    
        arg3 = arg4 / arg3;
        arg4 = arg0 & (0x01 << 0x70) - 0x01;
        var var0 = 0x0efa;
        var var1 = arg1;
        var var2 = arg2;
        var0 = func_1B67(var1, var2);
    
        if (!arg4) { assert(); }
    
        arg4 = var0 / arg4;
        var0 = 0x00;
    
        if (arg3 < arg4) { return arg3; }
        else { return arg4; }
    }
    
    function kLast() returns (var r0) { return storage[0x0b]; }
    
    function symbol() returns (var r0) {
        var temp0 = memory[0x40:0x60];
        r0 = temp0;
        memory[0x40:0x60] = r0 + 0x40;
        memory[r0:r0 + 0x20] = 0x06;
        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x2aa72496ab19 << 0xd1;
        return r0;
    }
    
    function MINIMUM_LIQUIDITY() returns (var r0) { return 0x03e8; }
    
    function func_149E(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {
        var temp0;
        temp0, memory[arg5:arg5 + arg4] = address(arg8).staticcall.gas(msg.gas)(memory[arg7:arg7 + arg6]);
        arg4 = !temp0;
    
        if (!arg4) {
            arg1 = memory[0x40:0x60];
            arg2 = returndata.length;
        
            if (arg2 < 0x20) { revert(memory[0x00:0x00]); }
        
            var temp1 = arg0;
            arg0 = memory[arg1:arg1 + 0x20];
            arg1 = temp1;
            r0 = func_1BCA(arg0, arg1);
            // Error: Could not resolve method call return address!
        } else {
            var temp2 = returndata.length;
            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];
            revert(memory[0x00:0x00 + returndata.length]);
        }
    }
    
    function func_14D6(var arg0, var arg1, var arg2) {
        func_19CD(arg0, arg1, arg2);
        // Error: Could not resolve method call return address!
    }
    
    function factory() returns (var r0) { return storage[0x05] & (0x01 << 0xa0) - 0x01; }
    
    function token1() returns (var r0) { return storage[0x07] & (0x01 << 0xa0) - 0x01; }
    
    function sync() {
        if (storage[0x0c] == 0x01) {
            storage[0x0c] = 0x00;
            var temp0 = memory[0x40:0x60];
            memory[temp0:temp0 + 0x20] = 0x70a08231 << 0xe0;
            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);
            var var0 = 0x18e4;
            var var1 = storage[0x06] & (0x01 << 0xa0) - 0x01;
            var var2 = 0x70a08231;
            var var3 = temp0 + 0x24;
            var var4 = 0x20;
            var var5 = memory[0x40:0x60];
            var var6 = temp0 - var5 + 0x24;
            var var7 = var5;
            var var8 = var1;
            var var9 = !address(var8).code.length;
        
            if (var9) { revert(memory[0x00:0x00]); }
        
            func_1825(var1, var2, var3, var4, var5, var6, var7, var8, var9);
            storage[0x0c] = 0x01;
            return;
        } else {
            var temp1 = memory[0x40:0x60];
            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;
            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;
            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x11;
            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x155b9a5cddd85c158c8e881313d0d2d151 << 0x7a;
            var temp2 = memory[0x40:0x60];
            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);
        }
    }
    
    function func_1825(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {
        var temp0;
        temp0, memory[arg4:arg4 + arg3] = address(arg7).staticcall.gas(msg.gas)(memory[arg6:arg6 + arg5]);
        arg3 = !temp0;
    
        if (!arg3) {
            arg0 = memory[0x40:0x60];
            arg1 = returndata.length;
        
            if (arg1 < 0x20) { revert(memory[0x00:0x00]); }
        
            arg0 = memory[arg0:arg0 + 0x20];
            var temp1 = memory[0x40:0x60];
            memory[temp1:temp1 + 0x20] = 0x70a08231 << 0xe0;
            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);
            arg1 = storage[0x07] & (0x01 << 0xa0) - 0x01;
            arg2 = 0x70a08231;
            arg3 = temp1 + 0x24;
            arg4 = 0x20;
            arg5 = memory[0x40:0x60];
            arg6 = temp1 - arg5 + 0x24;
            arg7 = arg5;
            arg8 = arg1;
            var var0 = !address(arg8).code.length;
        
            if (var0) { revert(memory[0x00:0x00]); }
        
            var temp2;
            temp2, memory[arg5:arg5 + arg4] = address(arg8).staticcall.gas(msg.gas)(memory[arg7:arg7 + arg6]);
            arg4 = !temp2;
        
            if (!arg4) {
                arg1 = memory[0x40:0x60];
                arg2 = returndata.length;
            
                if (arg2 < 0x20) { revert(memory[0x00:0x00]); }
            
                arg1 = memory[arg1:arg1 + 0x20];
                var temp3 = storage[0x08];
                var temp4 = (0x01 << 0x70) - 0x01;
                arg2 = temp3 & temp4;
                arg3 = temp3 / (0x01 << 0x70) & temp4;
                func_248A(arg0, arg1, arg2, arg3);
                // Error: Could not resolve method call return address!
            } else {
                var temp5 = returndata.length;
                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];
                revert(memory[0x00:0x00 + returndata.length]);
            }
        } else {
            var temp6 = returndata.length;
            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];
            revert(memory[0x00:0x00 + returndata.length]);
        }
    }
    
    function func_18EB() {
        var temp0 = memory[0x40:0x60];
        memory[temp0:temp0 + 0x20] = 0x1928456d << 0xe2;
        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);
        var var0 = 0x00;
        var var1 = storage[0x05] & (0x01 << 0xa0) - 0x01;
        var var2 = 0x64a115b4;
        var var3 = temp0 + 0x24;
        var var4 = 0x20;
        var var5 = memory[0x40:0x60];
        var var6 = temp0 - var5 + 0x24;
        var var7 = var5;
        var var8 = var1;
        var var9 = !address(var8).code.length;
    
        if (var9) { revert(memory[0x00:0x00]); }
    
        var temp1;
        temp1, memory[var5:var5 + var4] = address(var8).staticcall.gas(msg.gas)(memory[var7:var7 + var6]);
        var4 = !temp1;
    
        if (!var4) {
            var1 = memory[0x40:0x60];
            var2 = returndata.length;
        
            if (var2 < 0x20) { revert(memory[0x00:0x00]); }
        
            var0 = memory[var1:var1 + 0x20];
            var1 = !(var0 & (0x01 << 0xa0) - 0x01);
        
            if (var1) {
                if (var1) {
                label_19CA:
                    return;
                } else {
                label_1987:
                    var temp2 = memory[0x40:0x60];
                    memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;
                    memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;
                    memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x14;
                    memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x2ab734b9bbb0b82b191d102327a92124a22222a7 << 0x61;
                    var temp3 = memory[0x40:0x60];
                    revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);
                }
            } else if (msg.sender == var0 & (0x01 << 0xa0) - 0x01) { goto label_19CA; }
            else { goto label_1987; }
        } else {
            var temp4 = returndata.length;
            memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];
            revert(memory[0x00:0x00 + returndata.length]);
        }
    }
    
    function func_19CD(var arg0, var arg1, var arg2) {
        var temp0 = memory[0x40:0x60];
        memory[0x40:0x60] = temp0 + 0x40;
        memory[temp0:temp0 + 0x20] = 0x19;
        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7472616e7366657228616464726573732c75696e743235362900000000000000;
        var temp1 = memory[0x40:0x60];
        var temp2 = (0x01 << 0xa0) - 0x01;
        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = temp2 & arg1;
        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = arg2;
        var temp3 = memory[0x40:0x60];
        memory[temp3:temp3 + 0x20] = temp1 - temp3 + 0x44;
        memory[0x40:0x60] = temp1 + 0x64;
        var temp4 = temp3 + 0x20;
        memory[temp4:temp4 + 0x20] = (memory[temp4:temp4 + 0x20] & (0x01 << 0xe0) - 0x01) | (0xa9059cbb << 0xe0);
        var var0 = 0x00;
        var var1 = 0x60;
        var var2 = arg0 & temp2;
        var var3 = temp3;
        var var4 = memory[0x40:0x60];
        var var5 = var4;
        var var6 = temp4;
        var var7 = memory[var3:var3 + 0x20];
        var var8 = var7;
        var var9 = var5;
        var var10 = var6;
    
        if (var8 < 0x20) {
        label_1A7A:
            var temp5 = 0x0100 ** (0x20 - var8) - 0x01;
            var temp6 = var9;
            memory[temp6:temp6 + 0x20] = (memory[var10:var10 + 0x20] & ~temp5) | (memory[temp6:temp6 + 0x20] & temp5);
            var temp7 = memory[0x40:0x60];
            var temp8;
            temp8, memory[temp7:temp7 + 0x00] = address(var2).call.gas(msg.gas)(memory[temp7:temp7 + (var7 + var5) - temp7]);
            var3 = returndata.length;
            var4 = var3;
        
            if (var4 == 0x00) {
                var1 = 0x60;
                var temp9 = var2;
                var0 = temp9;
                var2 = var0;
            
                if (!var2) {
                label_1B0F:
                
                    if (var2) { return; }
                
                    var temp10 = memory[0x40:0x60];
                    memory[temp10:temp10 + 0x20] = 0x461bcd << 0xe5;
                    memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;
                    memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x1a;
                    memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x556e697377617056323a205452414e534645525f4641494c4544000000000000;
                    var temp11 = memory[0x40:0x60];
                    revert(memory[temp11:temp11 + temp10 - temp11 + 0x64]);
                } else {
                label_1AEE:
                    var2 = !memory[var1:var1 + 0x20];
                
                    if (var2) { goto label_1B0F; }
                
                    var temp12 = var1;
                    var2 = temp12 + 0x20;
                    var3 = memory[temp12:temp12 + 0x20];
                
                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }
                
                    var2 = memory[var2:var2 + 0x20];
                    goto label_1B0F;
                }
            } else {
                var temp13 = memory[0x40:0x60];
                var3 = temp13;
                memory[0x40:0x60] = var3 + (returndata.length + 0x3f & ~0x1f);
                memory[var3:var3 + 0x20] = returndata.length;
                var temp14 = returndata.length;
                memory[var3 + 0x20:var3 + 0x20 + temp14] = returndata[0x00:0x00 + temp14];
                var1 = var3;
                var temp15 = var2;
                var0 = temp15;
                var2 = var0;
            
                if (!var2) { goto label_1B0F; }
                else { goto label_1AEE; }
            }
        } else {
        label_1A64:
            var temp16 = var10;
            var temp17 = var9;
            memory[temp17:temp17 + 0x20] = memory[temp16:temp16 + 0x20];
            var8 = var8 + ~0x1f;
            var9 = temp17 + 0x20;
            var10 = temp16 + 0x20;
        
            if (var8 < 0x20) { goto label_1A7A; }
            else { goto label_1A64; }
        }
    }
    
    function func_1B67(var arg0, var arg1) returns (var r0) {
        var var0 = 0x00;
        var var1 = !arg1;
    
        if (var1) {
        label_1B82:
        
            if (var1) { return var0; }
        
            var temp0 = memory[0x40:0x60];
            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;
            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;
            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x14;
            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x64732d6d6174682d6d756c2d6f766572666c6f77 << 0x60;
            var temp1 = memory[0x40:0x60];
            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);
        } else {
            var0 = arg0 * arg1;
            var1 = arg0;
            var var2 = arg1;
            var var3 = var0;
        
            if (!var2) { assert(); }
        
            var1 = var3 / var2 == var1;
            goto label_1B82;
        }
    }
    
    function func_1BCA(var arg0, var arg1) returns (var r0) {
        var temp0 = arg0;
        var var0 = temp0 - arg1;
    
        if (var0 <= temp0) { return var0; }
    
        var temp1 = memory[0x40:0x60];
        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;
        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;
        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x15;
        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x64732d6d6174682d7375622d756e646572666c6f77 << 0x58;
        var temp2 = memory[0x40:0x60];
        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);
    }
    
    function func_1C1A(var arg0, var arg1, var arg2, var arg3) {
        var temp0 = memory[0x40:0x60];
        memory[temp0:temp0 + 0x20] = 0x918b6c8d << 0xe0;
        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);
        var temp1 = (0x01 << 0xa0) - 0x01;
        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & storage[0x06];
        var var0 = 0x00;
        var var1 = var0;
        var var2 = var1;
        var var3 = var2;
        var var4 = var3;
        var var5 = var4;
        var var6 = temp1 & storage[0x05];
        var var7 = 0x918b6c8d;
        var var8 = temp0 + 0x44;
        var var9 = 0x80;
        var var10 = memory[0x40:0x60];
        var var11 = temp0 - var10 + 0x44;
        var var12 = var10;
        var var13 = var6;
        var var14 = !address(var13).code.length;
    
        if (var14) { revert(memory[0x00:0x00]); }
    
        var temp2;
        temp2, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);
        var9 = !temp2;
    
        if (!var9) {
            var6 = memory[0x40:0x60];
            var7 = returndata.length;
        
            if (var7 < 0x80) { revert(memory[0x00:0x00]); }
        
            var temp3 = var6;
            var0 = memory[temp3:temp3 + 0x20];
            var1 = memory[temp3 + 0x20:temp3 + 0x20 + 0x20];
            var2 = memory[temp3 + 0x40:temp3 + 0x40 + 0x20];
            var3 = memory[temp3 + 0x60:temp3 + 0x60 + 0x20];
            var6 = 0x0de0b6b3a7640000;
            var7 = 0x1cda;
            var8 = arg0;
            var9 = var1;
            var7 = func_1B67(var8, var9);
        
            if (!var6) { assert(); }
        
            var4 = var7 / var6;
            var6 = 0x0de0b6b3a7640000;
            var7 = 0x1cfd;
            var8 = arg0;
            var9 = var3;
            var7 = func_1B67(var8, var9);
        
            if (!var6) { assert(); }
        
            var5 = var7 / var6;
        
            if (!var4) {
            label_1E12:
                var temp4 = memory[0x40:0x60];
                memory[temp4:temp4 + 0x20] = 0x918b6c8d << 0xe0;
                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = address(this);
                var temp5 = (0x01 << 0xa0) - 0x01;
                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = temp5 & storage[0x07];
                var6 = storage[0x05] & temp5;
                var7 = 0x918b6c8d;
                var8 = temp4 + 0x44;
                var9 = 0x80;
                var10 = memory[0x40:0x60];
                var11 = temp4 - var10 + 0x44;
                var12 = var10;
                var13 = var6;
                var14 = !address(var13).code.length;
            
                if (var14) { revert(memory[0x00:0x00]); }
            
                var temp6;
                temp6, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);
                var9 = !temp6;
            
                if (!var9) {
                    var6 = memory[0x40:0x60];
                    var7 = returndata.length;
                
                    if (var7 < 0x80) { revert(memory[0x00:0x00]); }
                
                    var temp7 = var6;
                    var0 = memory[temp7:temp7 + 0x20];
                    var1 = memory[temp7 + 0x20:temp7 + 0x20 + 0x20];
                    var2 = memory[temp7 + 0x40:temp7 + 0x40 + 0x20];
                    var3 = memory[temp7 + 0x60:temp7 + 0x60 + 0x20];
                    var6 = 0x0de0b6b3a7640000;
                    var7 = 0x1ec8;
                    var8 = arg1;
                    var9 = var1;
                    var7 = func_1B67(var8, var9);
                
                    if (!var6) { assert(); }
                
                    var4 = var7 / var6;
                    var6 = 0x0de0b6b3a7640000;
                    var7 = 0x1eeb;
                    var8 = arg1;
                    var9 = var3;
                    var7 = func_1B67(var8, var9);
                
                    if (!var6) { assert(); }
                
                    var5 = var7 / var6;
                
                    if (!var4) {
                    label_2000:
                        var temp8 = memory[0x40:0x60];
                        memory[temp8:temp8 + 0x20] = 0x70a08231 << 0xe0;
                        memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = address(this);
                        var6 = 0x00;
                        var7 = storage[0x06] & (0x01 << 0xa0) - 0x01;
                        var8 = 0x70a08231;
                        var9 = temp8 + 0x24;
                        var10 = 0x20;
                        var11 = memory[0x40:0x60];
                        var12 = temp8 - var11 + 0x24;
                        var13 = var11;
                        var14 = var7;
                        var var15 = !address(var14).code.length;
                    
                        if (var15) { revert(memory[0x00:0x00]); }
                    
                        var temp9;
                        temp9, memory[var11:var11 + var10] = address(var14).staticcall.gas(msg.gas)(memory[var13:var13 + var12]);
                        var10 = !temp9;
                    
                        if (!var10) {
                            var7 = memory[0x40:0x60];
                            var8 = returndata.length;
                        
                            if (var8 < 0x20) { revert(memory[0x00:0x00]); }
                        
                            var temp10 = memory[var7:var7 + 0x20];
                            var temp11 = memory[0x40:0x60];
                            memory[temp11:temp11 + 0x20] = 0x70a08231 << 0xe0;
                            memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = address(this);
                            var6 = temp10;
                            var7 = 0x00;
                            var8 = storage[0x07] & (0x01 << 0xa0) - 0x01;
                            var9 = 0x70a08231;
                            var10 = temp11 + 0x24;
                            var11 = 0x20;
                            var12 = memory[0x40:0x60];
                            var13 = temp11 - var12 + 0x24;
                            var14 = var12;
                            var15 = var8;
                            var var16 = !address(var15).code.length;
                        
                            if (var16) { revert(memory[0x00:0x00]); }
                        
                            var temp12;
                            temp12, memory[var12:var12 + var11] = address(var15).staticcall.gas(msg.gas)(memory[var14:var14 + var13]);
                            var11 = !temp12;
                        
                            if (!var11) {
                                var8 = memory[0x40:0x60];
                                var9 = returndata.length;
                            
                                if (var9 < 0x20) { revert(memory[0x00:0x00]); }
                            
                                var temp13 = memory[var8:var8 + 0x20];
                                var7 = temp13;
                                var8 = 0x2102;
                                var9 = var6;
                                var10 = var7;
                                var11 = arg2;
                                var12 = arg3;
                                func_248A(var9, var10, var11, var12);
                                return;
                            } else {
                                var temp14 = returndata.length;
                                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];
                                revert(memory[0x00:0x00 + returndata.length]);
                            }
                        } else {
                            var temp15 = returndata.length;
                            memory[0x00:0x00 + temp15] = returndata[0x00:0x00 + temp15];
                            revert(memory[0x00:0x00 + returndata.length]);
                        }
                    } else {
                        var temp16 = memory[0x40:0x60];
                        memory[temp16:temp16 + 0x20] = 0xa9059cbb << 0xe0;
                        var temp17 = (0x01 << 0xa0) - 0x01;
                        memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = temp17 & var0;
                        memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = var4;
                        var6 = storage[0x07] & temp17;
                        var7 = 0xa9059cbb;
                        var8 = temp16 + 0x44;
                        var9 = 0x20;
                        var10 = memory[0x40:0x60];
                        var11 = temp16 - var10 + 0x44;
                        var12 = var10;
                        var13 = 0x00;
                        var14 = var6;
                        var15 = !address(var14).code.length;
                    
                        if (var15) { revert(memory[0x00:0x00]); }
                    
                        var temp18;
                        temp18, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);
                        var9 = !temp18;
                    
                        if (!var9) {
                            var6 = memory[0x40:0x60];
                            var7 = returndata.length;
                        
                            if (var7 < 0x20) { revert(memory[0x00:0x00]); }
                        
                            var temp19 = memory[0x40:0x60];
                            memory[temp19:temp19 + 0x20] = 0xa9059cbb << 0xe0;
                            var temp20 = (0x01 << 0xa0) - 0x01;
                            memory[temp19 + 0x04:temp19 + 0x04 + 0x20] = temp20 & var2;
                            memory[temp19 + 0x24:temp19 + 0x24 + 0x20] = var5;
                            var6 = storage[0x07] & temp20;
                            var7 = 0xa9059cbb;
                            var8 = temp19 + 0x44;
                            var9 = 0x20;
                            var10 = memory[0x40:0x60];
                            var11 = temp19 - var10 + 0x44;
                            var12 = var10;
                            var13 = 0x00;
                            var14 = var6;
                            var15 = !address(var14).code.length;
                        
                            if (var15) { revert(memory[0x00:0x00]); }
                        
                            var temp21;
                            temp21, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);
                            var9 = !temp21;
                        
                            if (!var9) {
                                var6 = memory[0x40:0x60];
                                var7 = returndata.length;
                            
                                if (var7 >= 0x20) { goto label_2000; }
                                else { revert(memory[0x00:0x00]); }
                            } else {
                                var temp22 = returndata.length;
                                memory[0x00:0x00 + temp22] = returndata[0x00:0x00 + temp22];
                                revert(memory[0x00:0x00 + returndata.length]);
                            }
                        } else {
                            var temp23 = returndata.length;
                            memory[0x00:0x00 + temp23] = returndata[0x00:0x00 + temp23];
                            revert(memory[0x00:0x00 + returndata.length]);
                        }
                    }
                } else {
                    var temp24 = returndata.length;
                    memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];
                    revert(memory[0x00:0x00 + returndata.length]);
                }
            } else {
                var temp25 = memory[0x40:0x60];
                memory[temp25:temp25 + 0x20] = 0xa9059cbb << 0xe0;
                var temp26 = (0x01 << 0xa0) - 0x01;
                memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = temp26 & var0;
                memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = var4;
                var6 = storage[0x06] & temp26;
                var7 = 0xa9059cbb;
                var8 = temp25 + 0x44;
                var9 = 0x20;
                var10 = memory[0x40:0x60];
                var11 = temp25 - var10 + 0x44;
                var12 = var10;
                var13 = 0x00;
                var14 = var6;
                var15 = !address(var14).code.length;
            
                if (var15) { revert(memory[0x00:0x00]); }
            
                var temp27;
                temp27, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);
                var9 = !temp27;
            
                if (!var9) {
                    var6 = memory[0x40:0x60];
                    var7 = returndata.length;
                
                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }
                
                    var temp28 = memory[0x40:0x60];
                    memory[temp28:temp28 + 0x20] = 0xa9059cbb << 0xe0;
                    var temp29 = (0x01 << 0xa0) - 0x01;
                    memory[temp28 + 0x04:temp28 + 0x04 + 0x20] = temp29 & var2;
                    memory[temp28 + 0x24:temp28 + 0x24 + 0x20] = var5;
                    var6 = storage[0x06] & temp29;
                    var7 = 0xa9059cbb;
                    var8 = temp28 + 0x44;
                    var9 = 0x20;
                    var10 = memory[0x40:0x60];
                    var11 = temp28 - var10 + 0x44;
                    var12 = var10;
                    var13 = 0x00;
                    var14 = var6;
                    var15 = !address(var14).code.length;
                
                    if (var15) { revert(memory[0x00:0x00]); }
                
                    var temp30;
                    temp30, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);
                    var9 = !temp30;
                
                    if (!var9) {
                        var6 = memory[0x40:0x60];
                        var7 = returndata.length;
                    
                        if (var7 >= 0x20) { goto label_1E12; }
                        else { revert(memory[0x00:0x00]); }
                    } else {
                        var temp31 = returndata.length;
                        memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];
                        revert(memory[0x00:0x00 + returndata.length]);
                    }
                } else {
                    var temp32 = returndata.length;
                    memory[0x00:0x00 + temp32] = returndata[0x00:0x00 + temp32];
                    revert(memory[0x00:0x00 + returndata.length]);
                }
            }
        } else {
            var temp33 = returndata.length;
            memory[0x00:0x00 + temp33] = returndata[0x00:0x00 + temp33];
            revert(memory[0x00:0x00 + returndata.length]);
        }
    }
    
    function func_2110(var arg0, var arg1, var arg2) {
        var temp0 = (0x01 << 0xa0) - 0x01;
        var temp1 = arg0 & temp0;
        memory[0x00:0x20] = temp1;
        memory[0x20:0x40] = 0x02;
        var temp2 = keccak256(memory[0x00:0x40]);
        var temp3 = arg1 & temp0;
        memory[0x00:0x20] = temp3;
        memory[0x20:0x40] = temp2;
        var temp4 = arg2;
        storage[keccak256(memory[0x00:0x40])] = temp4;
        var temp5 = memory[0x40:0x60];
        memory[temp5:temp5 + 0x20] = temp4;
        var temp6 = memory[0x40:0x60];
        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);
    }
    
    function transfer(var arg0, var arg1, var arg2) {
        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;
        memory[0x20:0x40] = 0x01;
        var var1 = storage[keccak256(memory[0x00:0x40])];
        var var0 = 0x219b;
        var var2 = arg2;
        var0 = func_1BCA(var1, var2);
        var temp0 = (0x01 << 0xa0) - 0x01;
        memory[0x00:0x20] = arg0 & temp0;
        memory[0x20:0x40] = 0x01;
        storage[keccak256(memory[0x00:0x40])] = var0;
        memory[0x00:0x20] = arg1 & temp0;
        var0 = 0x21d0;
        var1 = storage[keccak256(memory[0x00:0x40])];
        var2 = arg2;
        var0 = func_26ED(var1, var2);
        var temp1 = (0x01 << 0xa0) - 0x01;
        var temp2 = arg1 & temp1;
        memory[0x00:0x20] = temp2;
        memory[0x20:0x40] = 0x01;
        storage[keccak256(memory[0x00:0x40])] = var0;
        var temp3 = memory[0x40:0x60];
        memory[temp3:temp3 + 0x20] = arg2;
        var temp4 = memory[0x40:0x60];
        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & (0x01 << 0xa0) - 0x01, stack[-3] & (0x01 << 0xa0) - 0x01]);
    }
    
    function func_222C(var arg0, var arg1) returns (var r0) {
        var var0 = 0x00;
        var var1 = var0;
        var var2 = storage[0x05] & (0x01 << 0xa0) - 0x01 & (0x01 << 0xa0) - 0x01;
        var var3 = 0x017e7e58;
        var temp0 = memory[0x40:0x60];
        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) << 0xe0;
        var var4 = temp0 + 0x04;
        var var5 = 0x20;
        var var6 = memory[0x40:0x60];
        var var7 = var4 - var6;
        var var8 = var6;
        var var9 = var2;
        var var10 = !address(var9).code.length;
    
        if (var10) { revert(memory[0x00:0x00]); }
    
        var temp1;
        temp1, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);
        var5 = !temp1;
    
        if (!var5) {
            var2 = memory[0x40:0x60];
            var3 = returndata.length;
        
            if (var3 < 0x20) { revert(memory[0x00:0x00]); }
        
            var0 = !!(memory[var2:var2 + 0x20] & (0x01 << 0xa0) - 0x01);
            var1 = memory[var2:var2 + 0x20];
            var2 = storage[0x0b];
        
            if (!(memory[var2:var2 + 0x20] & (0x01 << 0xa0) - 0x01)) {
                if (!var2) {
                label_2382:
                    return var0;
                } else {
                    storage[0x0b] = 0x00;
                    return var0;
                }
            } else if (!var2) {
            label_2371:
                goto label_2382;
            } else {
                var3 = 0x00;
                var4 = 0x22ea;
                var5 = 0x0ea2;
                var temp2 = (0x01 << 0x70) - 0x01;
                var6 = temp2 & arg0;
                var7 = arg1 & temp2;
                var5 = func_1B67(var6, var7);
                var4 = func_0EA2(var5);
                var3 = var4;
                var4 = 0x00;
                var5 = 0x22f7;
                var6 = var2;
                var5 = func_238A(var6);
                var4 = var5;
            
                if (var3 <= var4) {
                label_236E:
                    goto label_2371;
                } else {
                    var5 = 0x00;
                    var6 = 0x2325;
                    var7 = 0x2316;
                    var8 = var3;
                    var9 = var4;
                    var7 = func_1BCA(var8, var9);
                    var6 = func_2316(var7);
                    var5 = var6;
                    var6 = 0x00;
                    var7 = 0x234a;
                    var8 = var4;
                    var9 = 0x233e;
                    var10 = var3;
                    var var11 = 0x05;
                    var9 = func_1B67(var10, var11);
                    var7 = func_233E(var8, var9);
                    var temp3 = var7;
                    var6 = temp3;
                    var7 = 0x00;
                    var8 = var6;
                    var9 = var5;
                
                    if (!var8) { assert(); }
                
                    var7 = var9 / var8;
                
                    if (!var7) {
                    label_236A:
                        goto label_236E;
                    } else {
                        var8 = 0x236a;
                        var9 = var1;
                        var10 = var7;
                        func_23DC(var9, var10);
                        goto label_236A;
                    }
                }
            }
        } else {
            var temp4 = returndata.length;
            memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];
            revert(memory[0x00:0x00 + returndata.length]);
        }
    }
    
    function func_2316(var arg0) returns (var r0) {
        var temp0 = arg0;
        arg0 = storage[0x00];
        var var0 = temp0;
        r0 = func_1B67(arg0, var0);
        // Error: Could not resolve method call return address!
    }
    
    function func_233E(var arg0, var arg1) returns (var r0) {
        var temp0 = arg0;
        arg0 = arg1;
        arg1 = temp0;
        r0 = func_26ED(arg0, arg1);
        // Error: Could not resolve method call return address!
    }
    
    function func_238A(var arg0) returns (var r0) {
        var var0 = 0x00;
    
        if (arg0 > 0x03) {
            var temp0 = arg0;
            var0 = temp0;
            var var1 = var0 / 0x02 + 0x01;
        
            if (var1 >= var0) {
            label_23C7:
                goto label_23D7;
            } else {
            label_23A8:
                var0 = var1;
                var var2 = 0x02;
                var var3 = var0;
                var var4 = var3;
                var var5 = arg0;
            
                if (!var4) { assert(); }
            
                var3 = var5 / var4 + var3;
            
                if (!var2) { assert(); }
            
                var1 = var3 / var2;
            
                if (var1 >= var0) { goto label_23C7; }
                else { goto label_23A8; }
            }
        } else if (!arg0) {
        label_23D7:
            return var0;
        } else {
            var0 = 0x01;
            goto label_23D7;
        }
    }
    
    function func_23DC(var arg0, var arg1) {
        var var0 = 0x23ef;
        var var1 = storage[0x00];
        var var2 = arg1;
        var0 = func_26ED(var1, var2);
        storage[0x00] = var0;
        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;
        memory[0x20:0x40] = 0x01;
        var0 = 0x241a;
        var1 = storage[keccak256(memory[0x00:0x40])];
        var2 = arg1;
        var0 = func_26ED(var1, var2);
        var temp0 = arg0 & (0x01 << 0xa0) - 0x01;
        memory[0x00:0x20] = temp0;
        memory[0x20:0x40] = 0x01;
        storage[keccak256(memory[0x00:0x40])] = var0;
        var temp1 = memory[0x40:0x60];
        memory[temp1:temp1 + 0x20] = arg1;
        var temp2 = memory[0x40:0x60];
        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-3] & (0x01 << 0xa0) - 0x01]);
    }
    
    function func_248A(var arg0, var arg1, var arg2, var arg3) {
        var var0 = arg0 <= (0x01 << 0x70) - 0x01;
    
        if (arg0 <= (0x01 << 0x70) - 0x01) {
            if (var0) {
            label_24EF:
                var0 = block.timestamp & 0xffffffff;
                var var1 = var0 - (storage[0x08] / (0x01 << 0xe0) & 0xffffffff);
                var var2 = !!(var1 & 0xffffffff);
            
                if (var1 & 0xffffffff) {
                    var2 = !!(arg2 & (0x01 << 0x70) - 0x01);
                
                    if (!var2) { goto label_2533; }
                    else { goto label_2526; }
                } else if (!var2) {
                label_2533:
                
                    if (!var2) {
                    label_25A4:
                        var temp0 = (0x01 << 0x70) - 0x01;
                        var temp1 = (var0 & 0xffffffff) * (0x01 << 0xe0) | (((temp0 & arg1) * (0x01 << 0x70) | (((temp0 & arg0) | (storage[0x08] & ~0xffffffffffffffffffffffffffff)) & ~(0xffffffffffffffffffffffffffff << 0x70))) & (0x01 << 0xe0) - 0x01);
                        storage[0x08] = temp1;
                        var temp2 = memory[0x40:0x60];
                        memory[temp2:temp2 + 0x20] = temp0 & temp1;
                        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp0 & temp1 / (0x01 << 0x70);
                        var temp3 = memory[0x40:0x60];
                        log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1]);
                        return;
                    } else {
                    label_2539:
                        var2 = var1 & 0xffffffff;
                        var var3 = 0x2561;
                        var var4 = arg2;
                        var var5 = 0x254c;
                        var var6 = arg3;
                        var5 = func_273C(var6);
                        var3 = func_254C(var4, var5);
                        storage[0x09] = (var3 & (0x01 << 0xe0) - 0x01) * var2 + storage[0x09];
                        var2 = var1 & 0xffffffff;
                        var3 = 0x258c;
                        var4 = arg3;
                        var5 = 0x254c;
                        var6 = arg2;
                        var5 = func_273C(var6);
                        var3 = func_254C(var4, var5);
                        storage[0x0a] = (var3 & (0x01 << 0xe0) - 0x01) * var2 + storage[0x0a];
                        goto label_25A4;
                    }
                } else {
                label_2526:
                
                    if (!(arg3 & (0x01 << 0x70) - 0x01)) { goto label_25A4; }
                    else { goto label_2539; }
                }
            } else {
            label_24AD:
                var temp4 = memory[0x40:0x60];
                memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;
                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;
                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x13;
                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x556e697377617056323a204f564552464c4f57 << 0x68;
                var temp5 = memory[0x40:0x60];
                revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);
            }
        } else if (arg1 <= (0x01 << 0x70) - 0x01) { goto label_24EF; }
        else { goto label_24AD; }
    }
    
    function func_254C(var arg0, var arg1) returns (var r0) {
        var temp0 = arg0;
        arg0 = arg1 & (0x01 << 0xe0) - 0x01;
        arg1 = temp0;
        var var0 = 0x00;
        var var1 = arg1 & (0x01 << 0x70) - 0x01;
        var var2 = arg0 & (0x01 << 0xe0) - 0x01;
    
        if (var1) { return var2 / var1; }
        else { assert(); }
    }
    
    function func_264F(var arg0, var arg1) {
        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;
        memory[0x20:0x40] = 0x01;
        var var0 = 0x2678;
        var var1 = storage[keccak256(memory[0x00:0x40])];
        var var2 = arg1;
        var0 = func_1BCA(var1, var2);
        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;
        memory[0x20:0x40] = 0x01;
        storage[keccak256(memory[0x00:0x40])] = var0;
        var1 = storage[0x00];
        var0 = 0x26a5;
        var2 = arg1;
        var0 = func_1BCA(var1, var2);
        storage[0x00] = var0;
        var temp0 = memory[0x40:0x60];
        memory[temp0:temp0 + 0x20] = arg1;
        var temp1 = memory[0x40:0x60];
        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & (0x01 << 0xa0) - 0x01, 0x00]);
    }
    
    function func_26ED(var arg0, var arg1) returns (var r0) {
        var temp0 = arg0;
        var var0 = temp0 + arg1;
    
        if (var0 >= temp0) { return var0; }
    
        var temp1 = memory[0x40:0x60];
        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;
        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;
        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x14;
        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x64732d6d6174682d6164642d6f766572666c6f77 << 0x60;
        var temp2 = memory[0x40:0x60];
        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);
    }
    
    function func_273C(var arg0) returns (var r0) { return (arg0 & (0x01 << 0x70) - 0x01) * (0x01 << 0x70); }
}

